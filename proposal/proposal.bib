@inproceedings{wireframe,
  title={Secure integration of web content and applications on commodity mobile operating systems},
  author={Davidson, Drew and Chen, Yaohui and George, Franklin and Lu, Long and Jha, Somesh},
  booktitle={Proceedings of the 2017 ACM on Asia Conference on Computer and Communications Security},
  pages={652--665},
  year={2017},
  organization={ACM}
}
@inproceedings{dop,
  title={Data-oriented programming: On the expressiveness of non-control data attacks},
  author={Hu, Hong and Shinde, Shweta and Adrian, Sendroiu and Chua, Zheng Leong and Saxena, Prateek and Liang, Zhenkai},
  booktitle={Security and Privacy (SP), 2016 IEEE Symposium on},
  pages={969--986},
  year={2016},
  organization={IEEE}
}

@inproceedings{tsgx,
  title={T-SGX: Eradicating controlled-channel attacks against enclave programs},
  author={Shih, Ming-Wei and Lee, Sangho and Kim, Taesoo and Peinado, Marcus},
  booktitle={Proceedings of the 2017 Annual Network and Distributed System Security Symposium (NDSS), San Diego, CA},
  year={2017}
}
@inproceedings{controljujutsu,
  title={Control jujutsu: On the weaknesses of fine-grained control flow integrity},
  author={Evans, Isaac and Long, Fan and Otgonbaatar, Ulziibayar and Shrobe, Howard and Rinard, Martin and Okhravi, Hamed and Sidiroglou-Douskos, Stelios},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={901--913},
  year={2015},
  organization={ACM}
}
@inproceedings{boomerang,
  title={Boomerang: Exploiting the semantic gap in trusted execution environments},
  author={Machiry, Aravind and Gustafson, Eric and Spensky, Chad and Salls, Chris and Stephens, Nick and Wang, Ruoyu and Bianchi, Antonio and Choe, Yung Ryn and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={Proceedings of the 2017 Network and Distributed System Security Symposium (NDSS)},
  year={2017}
}


@inproceedings{3rdpartysurvey,
  title={Keep me updated: An empirical study of third-party library updatability on Android},
  author={Derr, Erik and Bugiel, Sven and Fahl, Sascha and Acar, Yasemin and Backes, Michael},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2187--2200},
  year={2017},
  organization={ACM}
}

@inproceedings {enigmasurvey,
author = {Erik Derr},
title = {The Impact of Third-party Code on Android App Security},
booktitle = {Enigma 2018 (Enigma 2018)},
year = {2018},
address = {Santa Clara, CA},
url = {https://www.usenix.org/node/208134},
publisher = {{USENIX} Association},
}


@misc{taomikesdk,
	author = {Ginny Marvin},
	title = {Warning: 18,000 android apps contains code that spy on your text messages},
	howpublished = {\url{http://thehackernews.com/2015/10/android-apps-steal-sms.html}},
	year = {2015}
}

@misc{baidusdk,
	author = {Mohit Kumar},
	title = {Backdoor in baidu android sdk puts 100 million devices at risk},
	howpublished = {\url{http://thehackernews.com/2015/11/android-malware-backdoor.html}},
	year = {2015}
}

@misc{fbsdk,
	author = {Mohit Kumar},
	title = {Facebook sdk vulnerability puts millions of smartphone users’ accounts at risk},
	howpublished = {\url{http://thehackernews.com/2014/07/facebook-sdk-vulnerability-puts.html}},
	year = {2014}
}

@misc{dropboxsdk,
	author = {Serdar Yegulalp},
	title = {IBM discloses vulnerability in Dropbox's Android SDK},
	howpublished = {\url{https://www.infoworld.com/article/2895016/mobile-technology/ibm-discloses-droppedin-vulnerability-for-dropboxs-android-sdk.html}},
	year = {2014}
}

@misc{xcodeghost,
	author = {Claud Xiao},
	title = {Malware XcodeGhost Infects 39 iOS Apps, Including WeChat, Affecting Hundreds of Millions of Users},
	howpublished = {\url{https://unit42.paloaltonetworks.com/malware-xcodeghost-infects-39-ios-apps-including-wechat-affecting-hundreds-of-millions-of-users/}},
	year = {2015}
}


@article{spinlock,
  title={The performance of spin lock alternatives for shared-money multiprocessors},
  author={Anderson, Thomas E.},
  journal={IEEE Transactions on Parallel and Distributed Systems},
  volume={1},
  number={1},
  pages={6--16},
  year={1990},
  publisher={IEEE}
}


@article{ret2libc,
  title={The advanced return-into-lib (c) exploits: PaX case study},
  author={Wojtczuk, Rafal},
  journal={Phrack Magazine, Volume 0x0b, Issue 0x3a, Phile\# 0x04 of 0x0e},
  year={2001}
}
@inproceedings{ropnoreturn,
  title={Return-oriented programming without returns},
  author={Checkoway, Stephen and Davi, Lucas and Dmitrienko, Alexandra and Sadeghi, Ahmad-Reza and Shacham, Hovav and Winandy, Marcel},
  booktitle={Proceedings of the 17th ACM conference on Computer and communications security},
  pages={559--572},
  year={2010},
  organization={ACM}
}
@inproceedings{jop,
  title={Jump-oriented programming: a new class of code-reuse attack},
  author={Bletsch, Tyler and Jiang, Xuxian and Freeh, Vince W and Liang, Zhenkai},
  booktitle={Proceedings of the 6th ACM Symposium on Information, Computer and Communications Security},
  pages={30--40},
  year={2011},
  organization={ACM}
}
@inproceedings{ret2libc2,
  title={The geometry of innocent flesh on the bone: Return-into-libc without function calls (on the x86)},
  author={Shacham, Hovav},
  booktitle={Proceedings of the 14th ACM conference on Computer and communications security},
  pages={552--561},
  year={2007},
  organization={ACM}
}
@inproceedings{ret2libc3,
  title={On the expressiveness of return-into-libc attacks},
  author={Tran, Minh and Etheridge, Mark and Bletsch, Tyler and Jiang, Xuxian and Freeh, Vincent and Ning, Peng},
  booktitle={International Workshop on Recent Advances in Intrusion Detection},
  pages={121--141},
  year={2011},
  organization={Springer}
}
@article{rop,
  title={Return-oriented programming: Systems, languages, and applications},
  author={Roemer, Ryan and Buchanan, Erik and Shacham, Hovav and Savage, Stefan},
  journal={ACM Transactions on Information and System Security (TISSEC)},
  volume={15},
  number={1},
  pages={2},
  year={2012},
  publisher={ACM}
}
@article{dep,
  title={Exec shield},
  author={van de Ven, Arjan and Molnar, Ingo},
  journal={Retrieved March},
  volume={1},
  pages={2017},
  year={2004}
}
@inproceedings{serna2012cve,
  title={CVE-2012-0769, the case of the perfect info leak},
  author={Serna, Fermin J},
  booktitle={Blackhat Conference, Feb},
  year={2012}
}
@article{aslr,
  title={PaX address space layout randomization (ASLR)},
  author={Team, PaX},
  year={2003}
}
@inproceedings{jitrop,
  title={Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization},
  author={Snow, Kevin Z and Monrose, Fabian and Davi, Lucas and Dmitrienko, Alexandra and Liebchen, Christopher and Sadeghi, Ahmad-Reza},
  booktitle={Security and Privacy (SP), 2013 IEEE Symposium on},
  pages={574--588},
  year={2013},
  organization={IEEE}
}

@inproceedings{heartbleed,
  title={The matter of heartbleed},
  author={Durumeric, Zakir and Kasten, James and Adrian, David and Halderman, J Alex and Bailey, Michael and Li, Frank and Weaver, Nicolas and Amann, Johanna and Beekman, Jethro and Payer, Mathias and others},
  booktitle={Proceedings of the 2014 Conference on Internet Measurement Conference},
  pages={475--488},
  year={2014},
  organization={ACM}
}
@inproceedings{iris,
  title={iris: Vetting private api abuse in ios applications},
  author={Deng, Zhui and Saltaformaggio, Brendan and Zhang, Xiangyu and Xu, Dongyan},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={44--56},
  year={2015},
  organization={ACM}
}

@misc{paxcfi,
	author = {PaX Team},
	title = {PaX RAP},
	howpublished = {\url{https://pax.grsecurity.net/docs/pax-future.txt}},
	year = {2003}
}


@misc{adinjection_profit,
	author = {Ginny Marvin},
	title = {Google Study Exposes "Tangled Web" Of Companies Profiting From Ad Injection},
	howpublished = {\url{http://marketingland.com/ad-injector-study-google-127738}},
	year = {2015}
}

@misc{pos,
	author = {David Odell},
	title = {Are You Vulnerable to Memory Scraping? (And What to Do About It)},
	howpublished = {\url{https://www.optiv.com/blog/are-you-vulnerable-to-memory-scraping-and-what-to-do-about-it}},
	year = {2016}
}

@misc{memscrap,
	author = {Kim Zetter},
	title = {HOW RAM SCRAPERS WORK: THE SNEAKY TOOLS BEHIND THE LATEST CREDIT CARD HACKS},
	howpublished = {\url{https://www.wired.com/2014/09/ram-scrapers-how-they-work/}},
	year = {2014}
}

@inproceedings{jekyll,
  title={Jekyll on iOS: When Benign Apps Become Evil.},
  author={Wang, Tielei and Lu, Kangjie and Lu, Long and Chung, Simon P and Lee, Wenke},
  booktitle={USENIX Security Symposium},
  volume={78},
  year={2013}
}


@inproceedings{shreds,
  title={Shreds: Fine-grained execution units with private memory},
  author={Chen, Yaohui and Reymondjohnson, Sebassujeen and Sun, Zhichuang and Lu, Long},
  booktitle={2016 IEEE Symposium on Security and Privacy (SP)},
  pages={56--71},
  year={2016},
  organization={IEEE}
}

@inproceedings{norax,
  title={NORAX: Enabling execute-only memory for COTS binaries on AArch64},
  author={Chen, Yaohui and Zhang, Dongli and Wang, Ruowen and Qiao, Rui and Azab, Ahmed M and Lu, Long and Vijayakumar, Hayawardh and Shen, Wenbo},
  booktitle={Security and Privacy (SP), 2017 IEEE Symposium on},
  pages={304--319},
  year={2017},
  organization={IEEE}
}


@inproceedings{ipr,
  title={Smashing the gadgets: Hindering return-oriented programming using in-place code randomization},
  author={Pappas, Vasilis and Polychronakis, Michalis and Keromytis, Angelos D},
  booktitle={2012 IEEE Symposium on Security and Privacy},
  pages={601--615},
  year={2012},
  organization={IEEE}
}


@inproceedings{gudka2015clean,
	Author = {Gudka, Khilan and Watson, Robert NM and Anderson, Jonathan and Chisnall, David and Davis, Brooks and Laurie, Ben and Marinos, Ilias and Neumann, Peter G and Richardson, Alex},
	Booktitle = {Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
	Date-Added = {2016-02-22 00:17:46 +0000},
	Date-Modified = {2016-02-22 00:17:46 +0000},
	Organization = {ACM},
	Pages = {1016--1031},
	Title = {Clean Application Compartmentalization with SOAAP},
	Year = {2015}}

@inproceedings{watson2015cheri,
	Author = {Watson, Robert NM and Woodruff, Jonathan and Neumann, Peter G and Moore, Simon W and Anderson, Jonathan and Chisnall, David and Dave, Nirav and Davis, Brooks and Gudka, Khilan and Laurie, Ben and others},
	Booktitle = {Security and Privacy (SP), 2015 IEEE Symposium on},
	Date-Added = {2016-02-22 00:15:47 +0000},
	Date-Modified = {2016-02-22 00:15:47 +0000},
	Organization = {IEEE},
	Pages = {20--37},
	Title = {Cheri: A hybrid capability-system architecture for scalable software compartmentalization},
	Year = {2015}}

@inproceedings{belay2012dune,
	Author = {Belay, Adam and Bittau, Andrea and Mashtizadeh, Ali and Terei, David and Mazi{\`e}res, David and Kozyrakis, Christos},
	Booktitle = {Presented as part of the 10th USENIX Symposium on Operating Systems Design and Implementation (OSDI 12)},
	Date-Added = {2016-02-22 00:14:31 +0000},
	Date-Modified = {2016-02-22 00:14:31 +0000},
	Pages = {335--348},
	Title = {Dune: Safe user-level access to privileged CPU features},
	Year = {2012}}

@misc{domains,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0211k/Babjdffh.html}},
	Title = {Memory domains},
	Bdsk-Url-1 = {http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0211k/Babjdffh.html}}

@misc{dacr,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0434b/CIHBCBFE.html}},
	Title = {Domain Access Control Register},
	Bdsk-Url-1 = {http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.ddi0434b/CIHBCBFE.html}}

@inproceedings{Deng:2015:IVP:2810103.2813675,
	Acmid = {2813675},
	Address = {New York, NY, USA},
	Author = {Deng, Zhui and Saltaformaggio, Brendan and Zhang, Xiangyu and Xu, Dongyan},
	Booktitle = {Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security},
	Date-Added = {2015-11-14 00:20:29 +0000},
	Date-Modified = {2015-11-14 00:20:29 +0000},
	Doi = {10.1145/2810103.2813675},
	Isbn = {978-1-4503-3832-5},
	Keywords = {application vetting, binary instrumentation, dynamic analysis, forced execution, iOS, private API, static analysis},
	Location = {Denver, Colorado, USA},
	Numpages = {13},
	Pages = {44--56},
	Publisher = {ACM},
	Series = {CCS '15},
	Title = {iRiS: Vetting Private API Abuse in iOS Applications},
	Url = {http://doi.acm.org/10.1145/2810103.2813675},
	Year = {2015},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2810103.2813675},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2810103.2813675}}

@misc{clang,
	Date-Added = {2015-11-14 00:13:57 +0000},
	Date-Modified = {2015-11-14 00:13:57 +0000},
	Howpublished = {\url{http://clang.llvm.org/}},
	Title = {clang: a C language family frontend for LLVM},
	Bdsk-Url-1 = {http://clang.llvm.org/}}

@inproceedings{lattner2004llvm,
	Author = {Lattner, Chris and Adve, Vikram},
	Booktitle = {Code Generation and Optimization, 2004. CGO 2004. International Symposium on},
	Date-Added = {2015-11-14 00:13:57 +0000},
	Date-Modified = {2015-11-14 00:13:57 +0000},
	Organization = {IEEE},
	Pages = {75--86},
	Title = {LLVM: A compilation framework for lifelong program analysis \& transformation},
	Year = {2004}}

@inproceedings{snow2013just,
	Author = {Snow, Kevin Z and Monrose, Fabian and Davi, Lucas and Dmitrienko, Alexandra and Liebchen, Christopher and Sadeghi, Ahmad-Reza},
	Booktitle = {Security and Privacy (SP), 2013 IEEE Symposium on},
	Organization = {IEEE},
	Pages = {574--588},
	Title = {Just-in-time code reuse: On the effectiveness of fine-grained address space layout randomization},
	Year = {2013}}

@inproceedings{abadi2005cfi,
	Author = {Abadi, Mart{\'\i}n and Budiu, Mihai and Erlingsson, Ulfar and Ligatti, Jay},
	Booktitle = {Proceedings of the 12th ACM conference on Computer and communications security},
	Organization = {ACM},
	Pages = {340--353},
	Title = {Control-flow integrity},
	Year = {2005}}

@inproceedings{czajkowski2000application,
	Abstract = {To date, systems offering multitasking for the Java&trade; programming language either use one process or one class loader for each application. Both approaches are unsatisfactory. Using operating system processes is expensive, scales poorly and does not fully exploit the protection features inherent in a safe language. Class loaders replicate application code, obscure the type system, and non-uniformly treat 'trusted' and 'untrusted' classes, which leads to subtle, but nevertheless, potentially harmful forms of undesirable inter-application interaction.In this paper we propose a novel, simple yet powerful solution. The new model improves on existing designs in terms of resource utilization while offering strong isolation among applications. The approach is applicable both on high-end servers and on small devices. The main idea is to maintain only one copy of every class, regardless of how many applications use it. Classes are transparently and automatically modified, so that each application has a separate copy of its static fields. Two prototypes are described and selected performance data is analyzed. Various aspects of the proposed architectural changes to the Java Virtual Machine are discussed.},
	Author = {Czajkowski, Grzegorz},
	Booktitle = {ACM SIGPLAN Notices},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Number = {10},
	Organization = {ACM},
	Pages = {354--366},
	Title = {Application isolation in the Java virtual machine},
	Volume = {35},
	Year = {2000}}

@url{naclarm,
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Howpublished = {\url{https://developer.chrome.com/native-client/reference/sandbox_internals/arm-32-bit-sandbox}},
	Title = {ARM 32-bit Sandbox},
	Url = {https://developer.chrome.com/native-client/reference/sandbox_internals/arm-32-bit-sandbox},
	Bdsk-Url-1 = {https://developer.chrome.com/native-client/reference/sandbox_internals/arm-32-bit-sandbox}}

@inproceedings{zhou2014armlock,
	Author = {Zhou, Yajin and Wang, Xiaoguang and Chen, Yue and Wang, Zhi},
	Booktitle = {Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {558--569},
	Title = {ARMlock: Hardware-Based fault isolation for ARM},
	Year = {2014}}

@inproceedings{watson2010capsicum,
	Abstract = {Capsicum is a lightweight operating system capabil- ity and sandbox framework planned for inclusion in FreeBSD 9. Capsicum extends, rather than replaces, UNIX APIs, providing new kernel primitives (sandboxed capability mode and capabilities) and a userspace sand- box API. These tools support compartmentalisation of monolithic UNIX applications into logical applications, an increasingly common goal supported poorly by dis- cretionary and mandatory access control. We demon- strate our approach by adapting core FreeBSD utilities and Google's Chromium web browser to use Capsicum primitives, and compare the complexity and robustness of Capsicum with other sandboxing techniques.},
	Author = {Watson, Robert NM and Anderson, Jonathan and Laurie, Ben and Kennaway, Kris},
	Booktitle = {USENIX Security Symposium},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {29--46},
	Title = {Capsicum: Practical Capabilities for UNIX.},
	Year = {2010}}

@incollection{wu2012codejail,
	Abstract = {Codejail, which supports a partial isolation of libraries that have tight memory interactions with the main program. Codejail requires no modification to the main program or the library. },
	Author = {Wu, Yongzheng and Sathyanarayan, Sai and Yap, Roland HC and Liang, Zhenkai},
	Booktitle = {Computer Security--ESORICS 2012},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {859--876},
	Publisher = {Springer},
	Title = {Codejail: Application-transparent isolation of libraries with tight program interactions},
	Year = {2012}}

@inproceedings{guan2014copker,
	Author = {Guan, Le and Lin, Jingqiang and Luo, Bo and Jing, Jiwu},
	Booktitle = {21st ISOC Network and Distributed System Security Symposium (NDSS)},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Title = {Copker: Computing with private keys without RAM},
	Year = {2014}}

@inproceedings{suh2003efficient,
	Abstract = {Secure processors enable new sets of applications suchas commercial grid computing, software copy-protection,and secure mobile agents by providing security from bothphysical and software attacks. This paper proposes newhardware mechanisms for memory integrity verification andencryption, which are two key primitives required in single-chipsecure processors. The integrity verification mechanismoffers significant performance advantages over existingones when the checks are infrequent as in grid computingapplications. The encryption mechanism improves theperformance in all cases.},
	Author = {Suh, G Edward and Clarke, Dwaine and Gassend, Blaise and Dijk, Marten van and Devadas, Srinivas},
	Booktitle = {Proceedings of the 36th annual IEEE/ACM International Symposium on Microarchitecture},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {IEEE Computer Society},
	Pages = {339},
	Title = {Efficient memory integrity verification and encryption for secure processors},
	Year = {2003}}

@inproceedings{sfi,
	Abstract = {One way to provide fault isolation among cooperating software modules is to place each in its own address space. However, for tightly-coupled modules, this solution incurs prohibitive context switch overhead. In this paper, we present a software approach to implementing fault isolation within a single address space.Our approach has two parts. First, we load the code and data for a distrusted module into its own fault do main, a logically separate portion of the application's address space. Second, we modify the object code of a distrusted module to prevent it from writing or jumping to an address outside its fault domain. Both these software operations are portable and programming language independent.Our approach poses a tradeoff relative to hardware fault isolation: substantially faster communication between fault domains, at a cost of slightly increased execution time for distrusted modules. We demonstrate that for frequently communicating modules, implementing fault isolation in software rather than hardware can substantially improve end-to-end application performance.},
	Author = {Wahbe, Robert and Lucco, Steven and Anderson, Thomas E and Graham, Susan L},
	Booktitle = {ACM SIGOPS Operating Systems Review},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Number = {5},
	Organization = {ACM},
	Pages = {203--216},
	Title = {Efficient software-based fault isolation},
	Volume = {27},
	Year = {1994}}

@inproceedings{dunn2012eternal,
	Abstract = {
Modern systems keep long memories. As we show in this paper, an adversary who gains access to a Linux system, even one that implements secure deallocation, can recover the contents of applications' windows, au- dio buffers, and data remaining in device drivers---long after the applications have terminated.
We design and implement Lacuna, a system that al- lows users to run programs in ``private sessions.'' After the session is over, all memories of its execution are erased. The key abstraction in Lacuna is an ephemeral channel, which allows the protected program to talk to peripheral devices while making it possible to delete the memories of this communication from the host. La- cuna can run unmodified applications that use graphics, sound, USB input devices, and the network, with only 20 percentage points of additional CPU utilization.},
	Author = {Dunn, Alan M and Lee, Michael Z and Jana, Suman and Kim, Sangman and Silberstein, Mark and Xu, Yuanzhong and Shmatikov, Vitaly and Witchel, Emmett},
	Booktitle = {OSDI},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {61--75},
	Title = {Eternal Sunshine of the Spotless Machine: Protecting Privacy with Ephemeral Channels.},
	Year = {2012}}

@inproceedings{fastsfi,
	Abstract = {Bugs in kernel extensions remain one of the main causes of poor operating system reliability despite proposed techniques that isolate extensions in separate protection domains to contain faults. We believe that previous fault isolation techniques are not widely used because they cannot isolate existing kernel extensions with low overhead on standard hardware. This is a hard problem because these extensions communicate with the kernel using a complex interface and they communicate frequently. We present BGI (Byte-Granularity Isolation), a new software fault isolation technique that addresses this problem. BGI uses efficient byte-granularity memory protection to isolate kernel extensions in separate protection domains that share the same address space. BGI ensures type safety for kernel objects and it can detect common types of errors inside domains. Our results show that BGI is practical: it can isolate Windows drivers without requiring changes to the source code and it introduces a CPU overhead between 0 and 16%. BGI can also find bugs during driver testing. We found 28 new bugs in widely used Windows drivers.},
	Author = {Castro, Miguel and Costa, Manuel and Martin, Jean-Philippe and Peinado, Marcus and Akritidis, Periklis and Donnelly, Austin and Barham, Paul and Black, Richard},
	Booktitle = {Proceedings of the ACM SIGOPS 22nd symposium on Operating systems principles},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {45--58},
	Title = {Fast byte-granularity software fault isolation},
	Year = {2009}}

@inproceedings{strackx2012fides,
	Abstract = {Protecting commodity operating systems against software
exploits is known to be challenging, because of their sheer
size. The same goes for key software applications such as
web browsers or mail clients. As a consequence, a significant
fraction of internet-connected computers is infected
with malware.
To mitigate this threat, we propose a combined approach
of (1) a run-time security architecture that can efficiently
protect fine-grained software modules executing on a standard
operating system, and (2) a compiler that compiles
standard C source code modules to such protected binary
modules.
The offered security guarantees are significant: relying on
a TCB of only a few thousand lines of code, we show that the
power of arbitrary kernel-level or process-level malware is reduced
to interacting with the module through the module's
public API. With a proper API design and implementation,
modules are fully protected.
The run-time architecture can be loaded on demand and
only incurs performance overhead when it is loaded. Benchmarks
show that, once loaded, it incurs a 3.22% system-wide
performance cost. For applications that make intensive use
of protected modules, and hence benefit most of the security
guarantees provided, the performance cost is up to 14%.},
	Author = {Strackx, Raoul and Piessens, Frank},
	Booktitle = {Proceedings of the 2012 ACM conference on Computer and communications security},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {2--13},
	Title = {Fides: Selectively hardening software application components against kernel-level or process-level malware},
	Year = {2012}}

@inproceedings{mccune2008flicker,
	Abstract = {We present Flicker, an infrastructure for executing security-sensitive code in complete isolation while trusting as few as 250 lines of additional code. Flicker can also provide meaningful, fine-grained attestation of the code executed (as well as its inputs and outputs) to a remote party. Flicker guarantees these properties even if the BIOS, OS and DMA-enabled devices are all malicious. Flicker leverages new commodity processors from AMD and Intel and does not require a new OS or VMM. We demonstrate a full implementation of Flicker on an AMD platform and describe our development environment for simplifying the construction of Flicker-enabled code.},
	Author = {McCune, Jonathan M and Parno, Bryan J and Perrig, Adrian and Reiter, Michael K and Isozaki, Hiroshi},
	Booktitle = {ACM SIGOPS Operating Systems Review},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Number = {4},
	Organization = {ACM},
	Pages = {315--328},
	Title = {Flicker: An execution infrastructure for TCB minimization},
	Volume = {42},
	Year = {2008}}

@inproceedings{fmp,
	Abstract = {We introduce Fracture, a novel framework that transforms and modernizes the basic process ab- straction. By ``fracturing'' an application into logical modules, Fracture enables powerful and novel run-time configurations that improve run-time testing, applica- tion availability, and general robustness, all in a generic and incremental manner. We demonstrate the utility of fracturing via in-depth case studies of a chat client, a web server, and two user-level file systems. Through these examples, we show that Fracture enables applica- tions to transparently tolerate memory leaks, buffer over- flows, and isolate subsystem crashes, with little change to source code; through intelligent fracturing, we can achieve low overhead as well, thus enabling deployment.

},
	Annote = {fractured mini-processes (FMPs)

FMPs, in their simplest implementation, correspond directly to UNIX processes.

An important aspect of Fracture is its flexibility, which allows an application to be split into mini-processes at function-level, yet also to be run as a single, low-overhead, monolithic process.},
	Author = {Pillai, Thanumalayan Sankaranarayana and Arpaci-Dusseau, Andrea C and Arpaci-Dusseau, Remzi H},
	Booktitle = {Proceedings of the 2014 International Conference on Timely Results in Operating Systems},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {USENIX Association},
	Pages = {4--4},
	Title = {Fractured processes: adaptive, fine-grained process abstractions},
	Year = {2014}}

@inproceedings{hawblitzel1998implementing,
	Abstract = {Safe language technology can be used for protection
within a single address space. This protection is
enforced by the language's type system, which ensures
that references to objects cannot be forged. A safe
language alone, however, lacks many features taken for
granted in more traditional operating systems, such as
rights revocation, thread protection, resource
management, and support for domain termination. This
paper describes the J-Kernel, a portable Java-based
protection system that addresses these issues. J-Kernel
protection domains can communicate through
revocable capabilities, but are prevented from directly
sharing unrevocable objects references. A number of
micro-benchmarks are presented to characterize the
costs of language-based protection, and an extensible
web server based on the J-Kernel demonstrates the use
of safe language techniques in a large application.},
	Annote = {We concentrated our efforts on developing a general
framework to allow multiple protection domains within
a single JVM. We provide features found in traditional
operating systems, such as support for rights revocation
and domain termination. In addition, we support
flexible protection policies between components,
including support for communication between mutually
suspicious components. },
	Author = {Hawblitzel, Chris and Chang, Chi-Chao and Czajkowski, Grzegorz and Hu, Deyu and Von Eicken, Thorsten},
	Booktitle = {USENIX Annual Technical Conference},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {259--270},
	Title = {Implementing Multiple Protection Domains in Java.},
	Year = {1998}}

@inproceedings{krohn2007information,
	Author = {Krohn, Maxwell and Yip, Alexander and Brodsky, Micah and Cliffer, Natan and Kaashoek, M Frans and Kohler, Eddie and Morris, Robert},
	Booktitle = {ACM SIGOPS Operating Systems Review},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Number = {6},
	Organization = {ACM},
	Pages = {321--334},
	Title = {Information flow control for standard OS abstractions},
	Volume = {41},
	Year = {2007}}

@inproceedings{sgx,
	Abstract = {For years the PC community has struggled to provide secure solutions on open platforms. Intel has developed innovative new technology to enable SW developers to develop and deploy secure applications on open platforms. The technology enables applications to execute with confidentiality and integrity in the native OS environment. It does this by providing ISA extensions for generating hardware enforceable containers at a granularity determined by the developer. These containers while opaque to the operating system are managed by the OS. This paper analyzes the threats and attacks to applications. It then describes the ISA extension for generating a HW based container. Finally it describes the programming model of this container.
},
	Annote = {the SGX paper, for citation

"enable applications to execute with confidentiality and integrity in the native OS environment."

the way SGX protects enclave memory is solely based on encryption? no access control of any form is used?
	EPC is managed by untrusted OS, then how its confidentiality and integrity is assured?
	EPC is protected by hardware, then how can it be managed by OS, to what degree can this manager access/infulence the enclave pages?
 	is the size of EPC fixed/small?
	an enclave page cannot be shared and belongs to only one enclave
	how does it deal with dependencies? requiring all code being inside the enclave? can in-enclave code call out-enclave code in enclave mode?
	
"Page accessed using the correct virtual address" why this restrction, what attacks does it prevent?

enclave creation: 
	load enclave binary; a compilation unit? 
	enclave identity is established, sealed, and versioned duirng init. does it mean enclave identitiy is transient? unreusable? nonpersistant? 
	enclave locked down after init to prevent modification from outside such as OS
	
	
enclave entry/exit
	enclave can be entered from multiple locations; caller of EENTRY specifies where. 
		

mapping b/w terms of SGX and Shred

SGX		Shred
EPC		s-pool
EPCM	s-pool metadata*
SECS	shred meatadata*
TCS		? per processor info about enclave entry?


location-based		time-based / period-based 
whole program		modular logic / small code pieces 
measure/attest		memory protection },
	Author = {McKeen, Frank and Alexandrovich, Ilya and Berenzon, Alex and Rozas, Carlos V and Shafi, Hisham and Shanbhogue, Vedvyas and Savagaonkar, Uday R},
	Booktitle = {Proceedings of the 2nd International Workshop on Hardware and Architectural Support for Security and Privacy},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {1--1},
	Title = {Innovative instructions and software model for isolated execution},
	Year = {2013}}

@article{jitsandbox,
	Abstract = {When dealing with dynamic, untrusted content, such as on the Web, software behavior must be sandboxed, typically through use of a language like JavaScript. However, even for such specially- designed languages, it is difficult to ensure the safety of highly- optimized, dynamic language runtimes which, for efficiency, rely on advanced techniques such as Just-In-Time (JIT) compilation, large libraries of native-code support routines, and intricate mechanisms for multi-threading and garbage collection. Each new runtime provides a new potential attack surface and this security risk raises a barrier to the adoption of new languages for creating untrusted content.
Removing this limitation, this paper introduces general mech- anisms for safely and efficiently sandboxing software, such as dynamic language runtimes, that make use of advanced, low- level techniques like runtime code modification. Our language- independent sandboxing builds on Software-based Fault Isolation (SFI), a traditionally static technique. We provide a more flexible form of SFI by adding new constraints and mechanisms that allow safety to be guaranteed despite runtime code modifications.},
	Annote = {Key message: The entirety of dynamic software execution can be sandboxed, including the language platform, even if it uses just-in-time compilation, runtime code modification, or large bodies of legacy code. 

Our language-independent sandboxing is not based on hardware protection domains, such as the common process abstraction. Instead, our work is based on Software-based Fault Isolation, which provides high-assurance safety guarantees and is largely independent of the operating system and other system- level details. SFI relies on machine code verification through static analysis and, to date, has not been applicable to sandboxing software that modify machine code at runtime. Removing this obstacle, we present extensions to SFI techniques that allow efficient, safe sandboxing of mechanisms such as just-in-time code generation and runtime code modification. Key to our extensions are new safety constraints on the structure of machine code that apply, inductively, even across code modification.

},
	Author = {Ansel, Jason and Marchenko, Petr and Erlingsson, {\'U}lfar and Taylor, Elijah and Chen, Brad and Schuff, Derek L and Sehr, David and Biffle, Cliff L and Yee, Bennet},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Journal = {ACM SIGPLAN Notices},
	Number = {6},
	Pages = {355--366},
	Publisher = {ACM},
	Title = {Language-independent sandboxing of just-in-time compilation and self-modifying code},
	Volume = {46},
	Year = {2011}}

@article{halderman2009lest,
	Author = {Halderman, J Alex and Schoen, Seth D and Heninger, Nadia and Clarkson, William and Paul, William and Calandrino, Joseph A and Feldman, Ariel J and Appelbaum, Jacob and Felten, Edward W},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Journal = {Communications of the ACM},
	Number = {5},
	Pages = {91--98},
	Publisher = {ACM},
	Title = {Lest we remember: cold-boot attacks on encryption keys},
	Volume = {52},
	Year = {2009}}

@article{hawblitzel2002luna,
	Abstract = {Extensible Java systems face a difficult trade-off between sharing and protection. On one hand, Java's ability to run different protection domains in a single virtual machine enables domains to share data easily and communicate without address space switches. On the other hand, unrestricted sharing blurs the boundaries between protection domains, making it difficult to terminate domains and enforce restrictions on resource usage. Existing solutions to these problems restrict sharing in an ad-hoc fashion, ruling out many desirable programming styles.This paper presents an extension to Java's type system that systematically addresses the issues of data sharing, revocation, thread control, and resource control. Multiple tasks running in a single virtual machines share data using special remote pointers, which have different types from local pointers. The distinction between local and remote pointers allows the Java runtime system to mediate the communication between tasks without slowing down operations on ordinary pointers. The extensions to Java are implemented by a system called Luna, based on the Guavac and Marmot compilers, extended with special optimizations to support both fast inter-task communication and dynamic access control. The paper describes two applications written in Luna: a simple extensible web server, and an extension of the Squid web cache to support dynamic content generation.},
	Author = {Hawblitzel, Chris and von Eicken, Thorsten},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Journal = {ACM SIGOPS Operating Systems Review},
	Number = {SI},
	Pages = {391--403},
	Publisher = {ACM},
	Title = {Luna: a flexible Java protection system},
	Volume = {36},
	Year = {2002}}

@inproceedings{HiStar,
	Author = {Zeldovich, Nickolai and Boyd-Wickizer, Silas and Kohler, Eddie and Mazi{\`e}res, David},
	Booktitle = {Proceedings of the 7th symposium on Operating systems design and implementation},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {USENIX Association},
	Pages = {263--278},
	Title = {Making information flow explicit in HiStar},
	Year = {2006}}

@misc{mpk15,
	Author = {Jonathan Corbet},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Howpublished = {\url{https://lwn.net/Articles/643797/}},
	Month = {May},
	Title = {Memory protection keys},
	Year = {2015}}

@inproceedings{mondrian,
	Abstract = {Mondrian memory protection (MMP) is a fine-grained protection scheme that allows multiple protection domains to flexibly share memory and export protected services. In contrast to earlier page-based systems, MMP allows arbitrary permissions control at the granularity of individual words. We use a compressed permissions table to reduce space overheads and employ two levels of permissions caching to reduce run-time overheads. The protection tables in our implementation add less than 9% overhead to the memory space used by the application. Accessing the protection tables adds than 8% additional memory references to the accesses made by the application. Although it can be layered on top of demand-paged virtual memory, MMP is also well-suited to embedded systems with a single physical address space. We extend MMP to support segment translation which allows a memory segment to appear at another location in the address space. We use this translation to implement zero-copy networking underneath the standard read system call interface, where packet payload fragments are connected together by the translation system to avoid data copying. This saves 52% of the memory references used by a traditional copying network stack.},
	Acmid = {605429},
	Address = {New York, NY, USA},
	Author = {Witchel, Emmett and Cates, Josh and Asanovi\'{c}, Krste},
	Booktitle = {Proceedings of the 10th International Conference on Architectural Support for Programming Languages and Operating Systems},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Doi = {10.1145/605397.605429},
	Isbn = {1-58113-574-2},
	Location = {San Jose, California},
	Numpages = {13},
	Pages = {304--316},
	Publisher = {ACM},
	Series = {ASPLOS X},
	Title = {Mondrian Memory Protection},
	Url = {http://doi.acm.org/10.1145/605397.605429},
	Year = {2002},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/605397.605429},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/605397.605429}}

@inproceedings{yee2009native,
	Author = {Yee, Bennet and Sehr, David and Dardyk, Gregory and Chen, J Bradley and Muth, Robert and Ormandy, Tavis and Okasaka, Shiki and Narula, Neha and Fullagar, Nicholas},
	Booktitle = {Security and Privacy, 2009 30th IEEE Symposium on},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {IEEE},
	Pages = {79--93},
	Title = {Native client: A sandbox for portable, untrusted x86 native code},
	Year = {2009}}

@inproceedings{chen2008overshadow,
	Abstract = {Commodity operating systems entrusted with securing sensitive data are remarkably large and complex, and consequently, frequently prone to compromise. To address this limitation, we introduce a virtual-machine-based system called Overshadow that protects the privacy and integrity of application data, even in the event of a total OScompromise. Overshadow presents an application with a normal view of its resources, but the OS with an encrypted view. This allows the operating system to carry out the complex task of managing an application's resources, without allowing it to read or modify them. Thus, Overshadow offers a last line of defense for application data.

Overshadow builds on multi-shadowing, a novel mechanism that presents different views of "physical" memory, depending on the context performing the access. This primitive offers an additional dimension of protection beyond the hierarchical protection domains implemented by traditional operating systems and processor architectures.

We present the design and implementation of Overshadow and show how its new protection semantics can be integrated with existing systems. Our design has been fully implemented and used to protect a wide range of unmodified legacy applications running on an unmodified Linux operating system. We evaluate the performance of our implementation, demonstrating that this approach is practical.},
	Author = {Chen, Xiaoxin and Garfinkel, Tal and Lewis, E Christopher and Subrahmanyam, Pratap and Waldspurger, Carl A and Boneh, Dan and Dwoskin, Jeffrey and Ports, Dan RK},
	Booktitle = {ACM SIGOPS Operating Systems Review},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Number = {2},
	Organization = {ACM},
	Pages = {2--13},
	Title = {Overshadow: a virtualization-based approach to retrofitting protection in commodity operating systems},
	Volume = {42},
	Year = {2008}}

@inproceedings{vasiliadis2014pixelvault,
	Author = {Vasiliadis, Giorgos and Athanasopoulos, Elias and Polychronakis, Michalis and Ioannidis, Sotiris},
	Booktitle = {Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {1131--1142},
	Title = {PixelVault: Using GPUs for securing cryptographic operations},
	Year = {2014}}

@inproceedings{provos2003preventing,
	Abstract = {privilege separation is a generic approach
that lets parts of an application run with different levels
of privilege inside their indiviudal processes

Privilege separation is a generic approach to limit the scope of programming bugs. The basic principle of privilege separation is to reduce the amount of code that runs with special privilege without affecting or limiting the functionality of the service. This narrows the exposure to bugs in code that is executed with privileges. Ideally, the only consequence of an error in a privilege separated service is denial of service to the adversary himself.

we accomplish privilege separation by spawning unprivileged children from a privileged parent. To execute privileged operations, an unprivileged child asks its privileged parent to execute the operation on behalf of the child.

},
	Author = {Provos, Niels and Friedl, Markus and Honeyman, Peter},
	Booktitle = {USENIX Security},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Title = {Preventing Privilege Escalation.},
	Volume = {3},
	Year = {2003}}

@inproceedings{kilpatrick2003privman,
	Abstract = {Writing secure, trusted software for UNIX platforms is difficult. There are a number of approaches to enabling more secure development, but it is apparent that the current set of solutions are neither achieving acceptance nor having sufficient impact. In this paper, we introduce a library to address a particularly difficult problem in secure code development: partitioning processes to isolate privileges in trusted code.

Privilege separation is a technique that isolates trusted code, therefore reducing the amount of code that needs to be carefully audited. While the technique is not new, it is not widely used due to difficulties of implementation. We present Privman, a library that makes privilege separation easy. The primary benefit of the Privman library is a systematic, reusable framework and library for developing partitioned applications. We demonstrate the feasibility of the approach by applying it to two real systems, thttpd and WU-FTPD.

},
	Annote = {We present a library, called Privman, which simplifies the task of partitioning applications for a particular class of applications, privileged UNIX daemons.
Programs that use Privman split themselves into two processes: a privilege server, and the main application. The main application gives up all privilege, and asks the privilege server to perform any privileged operations on its behalf.},
	Author = {Kilpatrick, Douglas},
	Booktitle = {USENIX Annual Technical Conference, FREENIX Track},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {273--284},
	Title = {Privman: A Library for Partitioning Applications.},
	Year = {2003}}

@inproceedings{brumley2004privtrans,
	Abstract = {Privilege separation partitions a single program into two parts: a privileged program called the monitor and an unprivileged program called the slave. All trust and privileges are relegated to the monitor, which results in a smaller and more easily secured trust base. Previously the privilege separation procedure, i.e., partitioning one program into the monitor and slave, was done by hand [18,28]. We design techniques and develop a tool called Privtrans that allows us to automatically integrate privilege separation into source code, provided a few programmer annotations. For instance, our approach can automatically integrate the privilege separation previously done by hand in OpenSSH, while enjoying similar security benefits. Additionally, we propose optimization techniques that augment static analysis with dynamic information. Our optimization techniques reduce the number of expensive calls made by the slave to the monitor. We show Privtrans is effective by integrating privilege separation into several open-source applications.


"Privtrans that allows us to automatically integrate
privilege separation into source code, provided
a few programmer annotations."},
	Author = {Brumley, David and Song, Dawn},
	Booktitle = {USENIX Security Symposium},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {57--72},
	Title = {Privtrans: Automatically partitioning programs for privilege separation},
	Year = {2004}}

@inproceedings{harrison2007protecting,
	Abstract = {Cryptography has become an indispensable mechanism for securing systems, communications and applications. While offering strong protection, cryptography makes the assumption that cryptographic keys are kept absolutely se- cret. In general this assumption is very difficult to guarantee in real life because computers may be compromised rela- tively easily. In this paper we investigate a class of attacks, which exploit memory disclosure vulnerabilities to expose cryptographic keys. We demonstrate that the threat is real by formulating an attack that exposed the private key of an OpenSSH server within 1 minute, and exposed the private key of an Apache HTTP server within 5 minutes. We pro- pose a set of techniques to address such attacks. Experi- mental results show that our techniques are efficient (i.e., imposing no performance penalty) and effective --- unless a large portion of allocated memory is disclosed.},
	Annote = {[looks like a short paper which was rejected/downgraded as a regular paper at DSN]

we investigate a class of attacks, which exploit memory disclosure vulnerabilities to expose cryptographic keys. 

formulating an attack that exposed the private key of an OpenSSH server within 1 minute, 
exposed the private key of an Apache HTTP server within 5 minutes.

exploits a ext4 info leak vulnerability, which requires inserting a USB key to vicitm mahcine. 

In both OpenSSH and Apache HTTP servers (details of the Apache case is deferred to [13]), many copies of the private key can be found in both allocated memory and unallocated memory. This confirms our suspicion that copies of cryptographic keys somewhat flooded in mem- ory when the number of SSH / HTTP connections increases -- even in newer operating systems, and explains why the afore-experimented attacks were so powerful.},
	Author = {Harrison, Keith and Xu, Shouhuai},
	Booktitle = {Dependable Systems and Networks, 2007. DSN'07. 37th Annual IEEE/IFIP International Conference on},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {IEEE},
	Pages = {137--143},
	Title = {Protecting cryptographic keys from memory disclosure attacks},
	Year = {2007}}

@inproceedings{Mimosa15,
	Abstract = {Cryptography plays an important role in computer and communication security. In practical implementations of cryptosystems, the cryptographic keys are usually loaded into the memory as plaintext, and then used in the cryptographic algorithms. Therefore, the private keys are subject to memory disclosure attacks that read unauthorized data from RAM. Such attacks could be performed through software methods (e.g., Open SSL Heart bleed) even when the integrity of the victim system's executable binaries is maintained. They could also be performed through physical methods (e.g., Cold-boot attacks on RAM chips) even when the system is free of software vulnerabilities. In this paper, we propose Mimosa that protects RSA private keys against the above software-based and physical memory attacks. When the Mimosa service is in idle, private keys are encrypted and reside in memory as cipher text. During the cryptographic computing, Mimosa uses hardware transactional memory (HTM) to ensure that (a) whenever a malicious process other than Mimosa attempts to read the plaintext private key, the transaction aborts and all sensitive data are automatically cleared with hardware mechanisms, due to the strong atomicity guarantee of HTM, and (b) all sensitive data, including private keys and intermediate states, appear as plaintext only within CPU-bound caches, and are never loaded to RAM chips. To the best of our knowledge, Mimosa is the first solution to use transactional memory to protect sensitive data against memory disclosure attacks. We have implemented Mimosa on a commodity machine with Intel Core i7 Haswell CPUs. Through extensive experiments, we show that Mimosa effectively protects cryptographic keys against various attacks that attempt to read sensitive data from memory, and it only introduces a small performance overhead.},
	Annote = {Mimosa protects RSA private keys against the software-based and physical memory (disclosure) attacks.

Mimosa uses hardware transactional memory (HTM) to ensure that (a) whenever a malicious process other than Mimosa attempts to read the plaintext private key, the transaction aborts and all sensitive data are automatically cleared with hardware mechanisms, due to the strong atomicity guarantee of HTM, and (b) all sensitive data, including private keys and intermediate states, appear as plaintext only within CPU-bound caches, and are never loaded to RAM chips.},
	Author = {Le Guan and Jingqiang Lin and Bo Luo and Jiwu Jing and Jing Wang},
	Booktitle = {Security and Privacy (SP), 2015 IEEE Symposium on},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Doi = {10.1109/SP.2015.8},
	Issn = {1081-6011},
	Month = {May},
	Pages = {3-19},
	Title = {Protecting Private Keys against Memory Disclosure Attacks Using Hardware Transactional Memory},
	Year = {2015},
	Bdsk-Url-1 = {http://dx.doi.org/10.1109/SP.2015.8}}

@inproceedings{dong2013protecting,
	Abstract = {Web browsers isolate web origins, but do not provide direct abstrac- tions to isolate sensitive data and control computation over it within the same origin. As a result, guaranteeing security of sensitive web content requires trusting all code in the browser and client-side ap- plications to be vulnerability-free. In this paper, we propose a new abstraction, called CRYPTON, which supports intra-origin control over sensitive data throughout its life cycle. To securely enforce the semantics of CRYPTONs, we develop a standalone component called CRYPTON-KERNEL, which extensively leverages the func- tionality of existing web browsers without relying on their large TCB. Our evaluation demonstrates that the CRYPTON abstraction supported by the CRYPTON-KERNEL is widely applicable to pop- ular real-world applications with millions of users, including web- mail, chat, blog applications, and Alexa Top 50 websites, with low performance overhead.
},
	Annote = {the web server trusts a small piece of client-side code called CRYPTON-KERNEL.
The CRYPTON-KERNEL runs in a separate OS process and sandboxes the untrusted browser, which invokes the CRYPTON-KERNEL on-demand to securely interpret CRYPTONs. The CRYPTON-KERNEL communicates with the web server securely independent of untrusted browsers. },
	Author = {Dong, Xinshu and Chen, Zhaofeng and Siadati, Hossein and Tople, Shruti and Saxena, Prateek and Liang, Zhenkai},
	Booktitle = {Proceedings of the 2013 ACM SIGSAC conference on Computer \& communications security},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {1311--1324},
	Title = {Protecting sensitive web content from client-side vulnerabilities with CRYPTONS},
	Year = {2013}}

@inproceedings{crane2015readactor,
	Abstract = {Code-reuse attacks such as return-oriented programming (ROP) pose a severe threat to modern software. Designing practical and effective defenses against code-reuse attacks is highly challenging. One line of defense builds upon fine-grained code diversification to prevent the adversary from constructing a reliable code-reuse attack. However, all solutions proposed so far are either vulnerable to memory disclosure or are impractical for deployment on commodity systems. In this paper, we address the deficiencies of existing solutions and present the first practical, fine-grained code randomization defense, called Read actor, resilient to both static and dynamic ROP attacks. We distinguish between direct memory disclosure, where the attacker reads code pages, and indirect memory disclosure, where attackers use code pointers on data pages to infer the code layout without reading code pages. Unlike previous work, Read actor resists both types of memory disclosure. Moreover, our technique protects both statically and dynamically generated code. We use a new compiler-based code generation paradigm that uses hardware features provided by modern CPUs to enable execute-only memory and hide code pointers from leakage to the adversary. Finally, our extensive evaluation shows that our approach is practical -- we protect the entire Google Chromium browser and its V8 JIT compiler -- and efficient with an average SPEC CPU2006 performance overhead of only 6.4%.},
	Annote = {We introduce compiler transfor- mations that extend execute-only memory to protect against the new class of indirect information disclosure. We also present a new way to implement execute-only memory that leverages hardware-accelerated memory protections.

We introduce the first technique that extends coverage of execute-only memory to secure just-in-time (JIT) compiled code.},
	Author = {Crane, Stephen and Liebchen, Christopher and Homescu, Andrei and Davi, Lucas and Larsen, Per and Sadeghi, Ahmad-Reza and Brunthaler, Stefan and Franz, Michael},
	Booktitle = {IEEE Symposium on Security and Privacy, S\&P},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Title = {Readactor: Practical code randomization resilient to memory disclosure},
	Volume = {15},
	Year = {2015}}

@misc{mpk:rfc,
	Author = {Dave Hansen},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Howpublished = {\url{https://lwn.net/Articles/643617/}},
	Month = {May},
	Title = {[RFC] x86: Memory Protection Keys},
	Year = {2015}}

@inproceedings{suh2004secure,
	Abstract = {Dynamic information flow tracking is a hardware mechanism
to protect programs against malicious attacks by
identifying spurious information flows and restricting the
usage of spurious information. Every security attack to take
control of a program needs to transfer the program's control
to malevolent code. In our approach, the operating system
identifies a set of input channels as spurious, and the
processor tracks all information flows from those inputs. A
broad range of attacks are effectively defeated by disallowing
the spurious data to be used as instructions or jump target
addresses. We describe two different security policies
that track differing sets of dependencies. Implementing the
first policy only incurs, on average, a memory overhead of
0.26% and a performance degradation of 0.02%. This policy
does not require any modification of executables. The
stronger policy incurs, on average, a memory overhead of
4.5% and a performance degradation of 0.8%, and requires
binary annotation},
	Author = {Suh, G Edward and Lee, Jae W and Zhang, David and Devadas, Srinivas},
	Booktitle = {Acm Sigplan Notices},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Number = {11},
	Organization = {ACM},
	Pages = {85--96},
	Title = {Secure program execution via dynamic information flow tracking},
	Volume = {39},
	Year = {2004}}

@misc{heartbleedpatch,
	Author = {{Akamai Technologies}},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Howpublished = {\url{https://lwn.net/Articles/594923/}},
	Title = {Secure storage of private (RSA) keys}}

@misc{securestring,
	Author = {MSDN},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Howpublished = {\url{https://msdn.microsoft.com/en-us/library/system.security.securestring.aspx}},
	Title = {SecureString Class}}

@inproceedings{simmons2011security,
	Author = {Simmons, Patrick},
	Booktitle = {Proceedings of the 27th Annual Computer Security Applications Conference},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {73--82},
	Title = {Security through amnesia: a software-based solution to the cold boot attack on disk encryption},
	Year = {2011}}

@inproceedings{azab2011sice,
	Author = {Azab, Ahmed M and Ning, Peng and Zhang, Xiaolan},
	Booktitle = {Proceedings of the 18th ACM conference on Computer and communications security},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {375--388},
	Title = {Sice: a hardware-level strongly isolated computing environment for x86 multi-core platforms},
	Year = {2011}}

@article{zhu2011tainteraser,
	Author = {Zhu, David Yu and Jung, Jaeyeon and Song, Dawn and Kohno, Tadayoshi and Wetherall, David},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Journal = {ACM SIGOPS Operating Systems Review},
	Number = {1},
	Pages = {142--154},
	Publisher = {ACM},
	Title = {TaintEraser: protecting sensitive data leaks using application-level taint tracking},
	Volume = {45},
	Year = {2011}}

@inproceedings{durumeric2014matter,
	Author = {Durumeric, Zakir and Kasten, James and Adrian, David and Halderman, J Alex and Bailey, Michael and Li, Frank and Weaver, Nicolas and Amann, Johanna and Beekman, Jethro and Payer, Mathias and others},
	Booktitle = {Proceedings of the 2014 Conference on Internet Measurement Conference},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {ACM},
	Pages = {475--488},
	Title = {The matter of Heartbleed},
	Year = {2014}}

@inproceedings{secage,
	Acmid = {2813690},
	Author = {Liu, Yutao and Zhou, Tianyu and Chen, Kexin and Chen, Haibo and Xia, Yubin},
	Booktitle = {Proceedings of the 22Nd ACM SIGSAC Conference on Computer and Communications Security},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Doi = {10.1145/2810103.2813690},
	Series = {CCS '15},
	Title = {Thwarting Memory Disclosure with Efficient Hypervisor-enforced Intra-domain Isolation},
	Year = {2015},
	Bdsk-Url-1 = {http://doi.acm.org/10.1145/2810103.2813690},
	Bdsk-Url-2 = {http://dx.doi.org/10.1145/2810103.2813690}}

@inproceedings{muller2011tresor,
	Author = {M{\"u}ller, Tilo and Freiling, Felix C and Dewald, Andreas},
	Booktitle = {USENIX Security Symposium},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {17--17},
	Title = {TRESOR Runs Encryption Securely Outside RAM.},
	Year = {2011}}

@inproceedings{mccune2010trustvisor,
	Author = {McCune, Jonathan M and Li, Yanlin and Qu, Ning and Zhou, Zongwei and Datta, Anupam and Gligor, Virgil and Perrig, Adrian},
	Booktitle = {Security and Privacy (SP), 2010 IEEE Symposium on},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {IEEE},
	Pages = {143--158},
	Title = {TrustVisor: Efficient TCB reduction and attestation},
	Year = {2010}}

@inproceedings{vx32,
	Abstract = {Code sandboxing is useful for many purposes, but most sandboxing techniques require kernel modifications, do not completely isolate guest code, or incur substantial performance costs. Vx32 is a multipurpose user-level sandbox that enables any application to load and safely execute one or more guest plug-ins, confining each guest to a system call API controlled by the host application and to a restricted memory region within the host's address space. Vx32 runs guest code efficiently on several widespread operating systems without kernel extensions or special privileges; it protects the host program from both reads and writes by its guests; and it allows the host to restrict the instruction set available to guests. The key to vx32's combination of portability, flexibility, and efficiency is its use of x86 segmentation hardware to sandbox the guest's data accesses, along with a lightweight instruction translator to sandbox guest instructions.

We evaluate vx32 using microbenchmarks and whole system benchmarks, and we examine four applications based on vx32: an archival storage system, an extensible public-key infrastructure, an experimental user-level operating system running atop another host OS, and a Linux system call jail. The first three applications export custom APIs independent of the host OS to their guests, making their plug-ins binary-portable across host systems. Compute-intensive workloads for the first two applications exhibit between a 30% slowdown and a 30% speedup on vx32 relative to native execution; speedups result from vx32's instruction translator improving the cache locality of guest code. The experimental user-level operating system allows the use of the guest OS's applications alongside the host's native applications and runs faster than whole-system virtual machine monitors such as VMware and QEMU. The Linux system call jail incurs up to 80% overhead but requires no kernel modifications and is delegation-based, avoiding concurrency vulnerabilities present in other interposition mechanisms.},
	Annote = {Vx32 is a multipurpose user-level sandbox that enables any application to load and safely execute one or more guest plug-ins, confining each guest to a system call API controlled by the host application and to a restricted memory region within the host's address space.},
	Author = {Ford, Bryan and Cox, Russ},
	Booktitle = {USENIX Annual Technical Conference},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {Boston, MA},
	Pages = {293--306},
	Title = {Vx32: Lightweight User-level Sandboxing on the x86.},
	Year = {2008}}

@inproceedings{wedge,
	Abstract = {Software vulnerabilities and bugs persist, and so exploits continue to cause significant damage, particularly by divulging users' sensitive data to miscreants. Yet the vast majority of networked applications remain monolithically structured, in stark contravention of the ideal of least-privilege partitioning. Like others before us, we believe this state of affairs continues because today's operating systems offer isolation primitives that are cumbersome. We present Wedge, a system well suited to the splitting of complex, legacy, monolithic applications into fine-grained, least-privilege compartments. Wedge consists of two synergistic parts: OS primitives that create compartments with default-deny semantics, which force the programmer to make compartments' privileges explicit; and Crowbar, a pair of run-time analysis tools that assist the programmer in determining which code needs which privileges for which memory objects. By implementing the Wedge system atop Linux, and applying it to the SSL-enabled Apache web server and the OpenSSH login server, we demonstrate that Wedge allows fine-grained compartmentalization of applications to prevent the leakage of sensitive data, at acceptable performance cost. We further show that Wedge is powerful enough to prevent a subtle man-in-the-middle attack that succeeds on a more coarsely privilege-separated Apache web server.},
	Annote = {OS primitives that create compartments with default-deny semantics, which force the programmer to make compartments' privileges explicit; and Crowbar, a pair of run-time analysis tools that assist the programmer in determining which code needs which privileges for which memory objects.

Sthread: An sthread is the embodiment of a compartment
Tagged mem: The programmer expresses memory privileges for sthreads in terms of tags
Callgates: A callgate is a portion of code that runs with different (typically higher) privileges than its caller.
},
	Author = {Bittau, Andrea and Marchenko, Petr and Handley, Mark and Karp, Brad},
	Booktitle = {NSDI},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Pages = {309--322},
	Title = {Wedge: Splitting Applications into Reduced-Privilege Compartments.},
	Volume = {8},
	Year = {2008}}

@inproceedings{erlingsson2006xfi,
	Abstract = {XFI is a comprehensive protection system that offers both flexible access control and fundamental integrity guarantees, at any privilege level and even for legacy code in commodity systems. For this purpose, XFI combines static analysis with inline software guards and a two-stack execution model. We have implemented XFI for Windows on the x86 architecture using binary rewriting and a simple, stand-alone verifier; the implementation's correctness depends on the verifier, but not on the rewriter. We have applied XFI to software such as device drivers and multimedia codecs. The resulting modules function safely within both kernel and user-mode address spaces, with only modest enforcement overheads.},
	Author = {Erlingsson, Ulfar and Abadi, Mart{\'\i}n and Vrable, Michael and Budiu, Mihai and Necula, George C},
	Booktitle = {Proceedings of the 7th symposium on Operating systems design and implementation},
	Date-Added = {2015-11-13 09:33:09 +0000},
	Date-Modified = {2015-11-13 09:33:09 +0000},
	Organization = {USENIX Association},
	Pages = {75--88},
	Title = {XFI: Software guards for system address spaces},
	Year = {2006}}


@inproceedings{ccr,
  title={Compiler-assisted code randomization},
  author={Koo, Hyungjoon and Chen, Yaohui and Lu, Long and Kemerlis, Vasileios P and Polychronakis, Michalis},
  booktitle={2018 IEEE Symposium on Security and Privacy (SP)},
  pages={461--477},
  year={2018},
  organization={IEEE}
}

@inproceedings{AOCR,
	author = {Robert Rudd and Richard Skowyra and David Bigelow and Veer Dedhia and Thomas Hobson and Stephen Crane, Christopher Liebchen and Per Larsen and Lucas Davi and Michael Franz and Ahmad-Reza Sadeghi and Hamed Okhravi},
	title = {{Address-Oblivious Code Reuse: On the Effectiveness of Leakage Resilient Diversity}},
	 booktitle = {Proceedings of the Network and Distributed System Security Symposium (NDSS'17)},
	location = {San Diego, CA},
	month = {Feb},
	year = {2017}
}

%%%%%%%%%%%%%%%%% men-leak code reuse attacks

@inproceedings{brop,
  title={Hacking blind},
  author={Bittau, Andrea and Belay, Adam and Mashtizadeh, Ali and Mazi{\`e}res, David and Boneh, Dan},
  booktitle={2014 IEEE Symposium on Security and Privacy},
  pages={227--242},
  year={2014},
  organization={IEEE}
}

@inproceedings{returnzombie,
  title={Return to the zombie gadgets: Undermining destructive code reads via code inference attacks},
  author={Snow, K and Rogowski, Roman and Werner, J and Koo, H and Monrose, F and Polychronakis, Michalis},
  booktitle={IEEE Symposium on Security and Privacy},
  year={2016}
}

%%%%%%%%%%%%%%%%%%%%%%mem leak code reuse defenses begin

@inproceedings{heisenbyte,
  title={Heisenbyte: Thwarting memory disclosure attacks using destructive code reads},
  author={Tang, Adrian and Sethumadhavan, Simha and Stolfo, Salvatore},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={256--267},
  year={2015},
  organization={ACM}
}


@inproceedings{near,
  title={No-execute-after-read: Preventing code disclosure in commodity software},
  author={Werner, Jan and Baltas, George and Dallara, Rob and Otterness, Nathan and Snow, Kevin Z and Monrose, Fabian and Polychronakis, Michalis},
  booktitle={Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security},
  pages={35--46},
  year={2016},
  organization={ACM}
}

@inproceedings{xnr,
  title={You can run but you can't read: Preventing disclosure exploits in executable code},
  author={Backes, Michael and Holz, Thorsten and Kollenda, Benjamin and Koppe, Philipp and N{\"u}rnberger, Stefan and Pewny, Jannik},
  booktitle={Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security},
  pages={1342--1353},
  year={2014},
  organization={ACM}
}
@inproceedings{readactor,
  title={Readactor: Practical code randomization resilient to memory disclosure},
  author={Crane, Stephen and Liebchen, Christopher and Homescu, Andrei and Davi, Lucas and Larsen, Per and Sadeghi, Ahmad-Reza and Brunthaler, Stefan and Franz, Michael},
  booktitle={2015 IEEE Symposium on Security and Privacy},
  pages={763--780},
  year={2015},
  organization={IEEE}
}
@inproceedings{readactorpluplu,
  title={It's a TRaP: Table Randomization and Protection against Function-Reuse Attacks},
  author={Crane, Stephen J and Volckaert, Stijn and Schuster, Felix and Liebchen, Christopher and Larsen, Per and Davi, Lucas and Sadeghi, Ahmad-Reza and Holz, Thorsten and De Sutter, Bjorn and Franz, Michael},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={243--255},
  year={2015},
  organization={ACM}
}
@inproceedings{lr2,
  title={Leakage-resilient layout randomization for mobile devices},
  author={Braden, Kjell and Crane, Stephen and Davi, Lucas and Franz, Michael and Larsen, Per and Liebchen, Christopher and Sadeghi, Ahmad-Reza},
  booktitle={Proceedings of the 2016 Network and Distributed System Security (NDSS) Symposium},
  year={2016}
}
@inproceedings{hidem,
  title={HideM: Protecting the contents of userspace memory in the face of disclosure vulnerabilities},
  author={Gionta, Jason and Enck, William and Ning, Peng},
  booktitle={Proceedings of the 5th ACM Conference on Data and Application Security and Privacy},
  pages={325--336},
  year={2015},
  organization={ACM}
}
%%%%%%code pointer integrity
@inproceedings{cpi,
  title={Code-pointer integrity},
  author={Kuznetsov, Volodymyr and Szekeres, L{\'a}szl{\'o} and Payer, Mathias and Candea, George and Sekar, R and Song, Dawn},
  booktitle={11th USENIX Symposium on Operating Systems Design and Implementation (OSDI 14)},
  pages={147--163},
  year={2014}
}

%%%%%%%%%%%%%%%%%%CFI-begin
@inproceedings{abadi2005control,
  title={{Control-Flow Integrity}},
  author={Abadi, Mart{\'\i}n and Budiu, Mihai and Erlingsson, Ulfar and Ligatti, Jay},
  booktitle={Proceedings of the 12th ACM Conference on Computer and Communications Security},
  pages={340--353},
  year={2005},
  organization={ACM}
}

@inproceedings{ccfir,
 author = {Zhang, Chao and Wei, Tao and Chen, Zhaofeng and Duan, Lei and Szekeres, Laszlo and McCamant, Stephen and Song, Dawn and Zou, Wei},
 title = {{Practical Control Flow Integrity and Randomization for Binary Executables}},
 booktitle = {Proceedings of the 2013 IEEE Symposium on Security and Privacy},
 series = {SP '13},
 year = {2013},
 isbn = {978-0-7695-4977-4},
 pages = {559--573},
 numpages = {15},
 doi = {10.1109/SP.2013.44},
 acmid = {2498134},
 publisher = {IEEE Computer Society},
 address = {Washington, DC, USA},
} 

@inproceedings{bincfi,
  title={Control flow integrity for COTS binaries},
  author={Zhang, Mingwei and Sekar, R},
  booktitle={Presented as part of the 22nd USENIX Security Symposium (USENIX Security 13)},
  pages={337--352},
  year={2013}
}

@article{rapteampax,
  title={{grsecurity: RAP is here}},
  author={Team, PaX},
  year={2016}
}
@inproceedings{opaquecfi,
  title={Opaque Control-Flow Integrity.},
  author={Mohan, Vishwath and Larsen, Per and Brunthaler, Stefan and Hamlen, Kevin W and Franz, Michael},
  booktitle={NDSS},
  year={2015}
}
@inproceedings{rockjit,
  title={RockJIT: Securing just-in-time compilation using modular control-flow integrity},
  author={Niu, Ben and Tan, Gang},
  booktitle={Proceedings of the 2014 ACM SIGSAC Conference on Computer and Communications Security},
  pages={1317--1328},
  year={2014},
  organization={ACM}
}
@inproceedings{ifccvtv,
  title={Enforcing forward-edge control-flow integrity in GCC \& LLVM},
  author={Tice, Caroline and Roeder, Tom and Collingbourne, Peter and Checkoway, Stephen and Erlingsson, {\'U}lfar and Lozano, Luis and Pike, Geoff},
  booktitle={23rd USENIX Security Symposium (USENIX Security 14)},
  pages={941--955},
  year={2014}
}
@inproceedings{picfi,
  title={Per-input control-flow integrity},
  author={Niu, Ben and Tan, Gang},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={914--926},
  year={2015},
  organization={ACM}
}
@inproceedings{ccfi,
  title={CCFI: cryptographically enforced control flow integrity},
  author={Mashtizadeh, Ali Jose and Bittau, Andrea and Boneh, Dan and Mazi{\`e}res, David},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={941--951},
  year={2015},
  organization={ACM}
}
%%%%%%%%%%%%%%%%  CFI attacks begin
@inproceedings{coop,
  title={Counterfeit object-oriented programming: On the difficulty of preventing code reuse attacks in C++ applications},
  author={Schuster, Felix and Tendyck, Thomas and Liebchen, Christopher and Davi, Lucas and Sadeghi, Ahmad-Reza and Holz, Thorsten},
  booktitle={2015 IEEE Symposium on Security and Privacy},
  pages={745--762},
  year={2015},
  organization={IEEE}
}

@inproceedings{losingcontrol,
  title={Losing control: On the effectiveness of control-flow integrity under stack attacks},
  author={Conti, Mauro and Crane, Stephen and Davi, Lucas and Franz, Michael and Larsen, Per and Negro, Marco and Liebchen, Christopher and Qunaibit, Mohaned and Sadeghi, Ahmad-Reza},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={952--963},
  year={2015},
  organization={ACM}
}

@inproceedings{outofcontrol,
  title={Out of control: Overcoming control-flow integrity},
  author={G{\"o}ktas, Enes and Athanasopoulos, Elias and Bos, Herbert and Portokalidis, Georgios},
  booktitle={2014 IEEE Symposium on Security and Privacy},
  pages={575--589},
  year={2014},
  organization={IEEE}
}

@inproceedings{stitchinggadget,
  title={Stitching the gadgets: On the ineffectiveness of coarse-grained control-flow integrity protection},
  author={Davi, Lucas and Sadeghi, Ahmad-Reza and Lehmann, Daniel and Monrose, Fabian},
  booktitle={23rd USENIX Security Symposium (USENIX Security 14)},
  pages={401--416},
  year={2014}
}
@inproceedings{controlflowbending,
  title={Control-flow bending: On the effectiveness of control-flow integrity},
  author={Carlini, Nicholas and Barresi, Antonio and Payer, Mathias and Wagner, David and Gross, Thomas R},
  booktitle={24th USENIX Security Symposium (USENIX Security 15)},
  pages={161--176},
  year={2015}
}

%%%%%%%%%%%%%%%%%%randomizations-begin
@inproceedings{williams2016shuffler,
  title={Shuffler: Fast and Deployable Continuous Code Re-Randomization},
  author={Williams-King, David and Gobieski, Graham and Williams-King, Kent and Blake, James P and Yuan, Xinhao and Colp, Patrick and Zheng, Michelle and Kemerlis, Vasileios P and Yang, Junfeng and Aiello, William},
  booktitle={12th USENIX Symposium on Operating Systems Design and Implementation (OSDI 16)},
  year={2016},
  organization={USENIX Association}
}
@article{team2003pax,
  title={{PaX address space layout randomization (ASLR)}},
  author={Team, PaX},
  year={2003}
}

@inproceedings{bhatkar2005efficient,
  title={Efficient Techniques for Comprehensive Protection from Memory Error Exploits.},
  author={Bhatkar, Sandeep and DuVarney, Daniel C and Sekar, R},
  booktitle={Usenix Security},
  year={2005}
}
@inproceedings{giuffrida2012enhanced,
  title={Enhanced operating system security through efficient and fine-grained address space randomization},
  author={Giuffrida, Cristiano and Kuijsten, Anton and Tanenbaum, Andrew S},
  booktitle={Presented as part of the 21st USENIX Security Symposium (USENIX Security 12)},
  pages={475--490},
  year={2012}
}

@inproceedings{davi2013gadge,
  title={Gadge me if you can: secure and efficient ad-hoc instruction-level randomization for x86 and ARM},
  author={Davi, Lucas Vincenzo and Dmitrienko, Alexandra and N{\"u}rnberger, Stefan and Sadeghi, Ahmad-Reza},
  booktitle={Proceedings of the 8th ACM SIGSAC symposium on Information, computer and communications security},
  pages={299--310},
  year={2013},
  organization={ACM}
}

@inproceedings{shacham2004effectiveness,
  title={{On the Effectiveness of Address-Space Randomization}},
  author={Shacham, Hovav and Page, Matthew and Pfaff, Ben and Goh, Eu-Jin and Modadugu, Nagendra and Boneh, Dan},
  booktitle={Proceedings of the 11th ACM conference on Computer and communications security},
  pages={298--307},
  year={2004},
  organization={ACM}
}


@inproceedings{ilr,
  title={ILR: Where'd My Gadgets Go?},
  author={Hiser, Jason and Nguyen-Tuong, Anh and Co, Michele and Hall, Matthew and Davidson, Jack W},
  booktitle={2012 IEEE Symposium on Security and Privacy},
  pages={571--585},
  year={2012},
  organization={IEEE}
}

@inproceedings{aslp,
  title={Address Space Layout Permutation (ASLP): Towards Fine-Grained Randomization of Commodity Software.},
  author={Kil, Chongkyung and Jun, Jinsuk and Bookholt, Christopher and Xu, Jun and Ning, Peng},
  booktitle={ACSAC},
  volume={6},
  pages={339--348},
  year={2006}
}

@inproceedings{binstir,
  title={Binary stirring: Self-randomizing instruction addresses of legacy x86 binary code},
  author={Wartell, Richard and Mohan, Vishwath and Hamlen, Kevin W and Lin, Zhiqiang},
  booktitle={Proceedings of the 2012 ACM conference on Computer and communications security},
  pages={157--168},
  year={2012},
  organization={ACM}
}

@inproceedings{jugglinggadgets,
  title={Juggling the gadgets: Binary-level code randomization using instruction displacement},
  author={Koo, Hyungjoon and Polychronakis, Michalis},
  booktitle={Proceedings of the 11th ACM on Asia Conference on Computer and Communications Security},
  pages={23--34},
  year={2016},
  organization={ACM}
}

@inproceedings{smashinggadget,
  title={Smashing the gadgets: Hindering return-oriented programming using in-place code randomization},
  author={Pappas, Vasilis and Polychronakis, Michalis and Keromytis, Angelos D},
  booktitle={2012 IEEE Symposium on Security and Privacy},
  pages={601--615},
  year={2012},
  organization={IEEE}
}

@inproceedings{isomeron,
  title={Isomeron: Code Randomization Resilient to (Just-In-Time) Return-Oriented Programming.},
  author={Davi, Lucas and Liebchen, Christopher and Sadeghi, Ahmad-Reza and Snow, Kevin Z and Monrose, Fabian},
  booktitle={NDSS},
  year={2015}
}

@inproceedings{remix,
  title={Remix: On-demand Live Randomization},
  author={Chen, Yue and Wang, Zhi and Whalley, David and Lu, Long},
  booktitle={Proceedings of the Sixth ACM Conference on Data and Application Security and Privacy},
  pages={50--61},
  year={2016},
  organization={ACM}
}


@inproceedings{timelyrandom,
  title={Timely rerandomization for mitigating memory disclosures},
  author={Bigelow, David and Hobson, Thomas and Rudd, Robert and Streilein, William and Okhravi, Hamed},
  booktitle={Proceedings of the 22nd ACM SIGSAC Conference on Computer and Communications Security},
  pages={268--279},
  year={2015},
  organization={ACM}
}


%%%%%%%%%%%%%%%%%%%%%%% misc  %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@article{linearsweep,
  title={An In-Depth Analysis of Disassembly on Full-Scale x86/x64 Binaries},
  author={Andriesse, Dennis and Chen, Xi and van der Veen, Victor and Slowinska, Asia and Bos, Herbert}
}
@inproceedings{eternalwar,
  title={Sok: Eternal war in memory},
  author={Szekeres, Laszlo and Payer, Mathias and Wei, Tao and Song, Dawn},
  booktitle={Security and Privacy (SP), 2013 IEEE Symposium on},
  pages={48--62},
  year={2013},
  organization={IEEE}
}

@misc{pierequirement,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://source.android.com/security/enhancements/enhancements50.html}},
	Title = {Android executables mandatorily need to be PIE},
	Bdsk-Url-1 = {https://source.android.com/security/enhancements/enhancements50.html}}

@misc{unixbench,
  title={Unixbench 4.1. 0},
  author={Niemi, DC}
}

@inproceedings{undecidablex86,
  title={Differentiating code from data in x86 binaries},
  author={Wartell, Richard and Zhou, Yan and Hamlen, Kevin W and Kantarcioglu, Murat and Thuraisingham, Bhavani},
  booktitle={Joint European Conference on Machine Learning and Knowledge Discovery in Databases},
  pages={522--536},
  year={2011},
  organization={Springer}
}
@misc{xomconfig,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://armv8-ref.codingbelief.com/en/chapter_d4/d44_1_memory_access_control.html}},
	Title = {EL\_0 execute-only memory configuration},
	Bdsk-Url-1 = {https://armv8-ref.codingbelief.com/en/chapter_d4/d44_1_memory_access_control.html}}

@misc{esrinterp,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://infocenter.arm.com/help/topic/com.arm.doc.ddi0500e/CIHFICFI.html}},
	Title = {Exception Syndrome Register(ESR) interpretation},
	Bdsk-Url-1 = {http://infocenter.arm.com/help/topic/com.arm.doc.ddi0500e/CIHFICFI.html}}

@misc{cts,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://source.android.com/compatibility/cts/index.html}},
	Title = {Android Compatibility Test Suite},
	Bdsk-Url-1 = {https://source.android.com/compatibility/cts/index.html}}

@misc{dwarf,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://www.dwarfstd.org}},
	Title = {DWARF standards},
	Bdsk-Url-1 = {http://www.dwarfstd.org}}

@article{originalxom,
  title={Architectural support for copy and tamper resistant software},
  author={Lie, David and Thekkath, Chandramohan and Mitchell, Mark and Lincoln, Patrick and Boneh, Dan and Mitchell, John and Horowitz, Mark},
  journal={ACM SIGPLAN Notices},
  volume={35},
  number={11},
  pages={168--177},
  year={2000},
  publisher={ACM}
}
@inproceedings{morula,
  title={From zygote to morula: Fortifying weakened aslr on android},
  author={Lee, Byoungyoung and Lu, Long and Wang, Tielei and Kim, Taesoo and Lee, Wenke},
  booktitle={2014 IEEE Symposium on Security and Privacy},
  pages={424--439},
  year={2014},
  organization={IEEE}
}
%%%%%%%%%%%%%%%%%%%%%%%unused references%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
@article{splittlb,
  title={More shadow walker: Tlb-splitting on modern x86},
  author={Torrey, Jacob},
  journal={Blackhat USA},
  year={2014}
}
@inproceedings{elfruinchristmas,
  title={How the ELF ruined Christmas},
  author={Di Federico, Alessandro and Cama, Amat and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={24th USENIX Security Symposium (USENIX Security 15)},
  pages={643--658},
  year={2015}
}

@article{stagefright,
  title={Stagefright: scary code in the heart of Android},
  author={Drake, Joshua},
  journal={BlackHat USA},
  year={2015}
}
@inproceedings{oneclassrootthemall,
  title={One class to rule them all: 0-day deserialization vulnerabilities in android},
  author={Peles, Or and Hay, Roee},
  booktitle={9th USENIX Workshop on Offensive Technologies (WOOT 15)},
  year={2015}
}

@misc{iospic,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://developer.apple.com/library/content/qa/qa1788/_index.html}},
	Title = {Apple warn developers when the binaries are not compiled as position-indepent},
	Bdsk-Url-1 = {https://developer.apple.com/library/content/qa/qa1788/_index.html}}
@misc{aarch64asm,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://infocenter.arm.com/help/index.jsp}},
	Title = {ARMv8 Architecture Reference Manual},
	Bdsk-Url-1 = {http://infocenter.arm.com/help/index.jsp}}
	

@inproceedings{idvtable,
  title={vfGuard: Strict Protection for Virtual Function Calls in COTS C++ Binaries.},
  author={Prakash, Aravind and Hu, Xunchao and Yin, Heng},
  year={2015}
}
@inproceedings{fia,
  title={Function Interface Analysis: A Principled Approach for Function Recognition in {COTS} Binaries},
  author={Qiao, Rui and Sekar, R.},
  booktitle={The 47th IEEE/IFIP International Conference on Dependable Systems and Networks},
  year={2017}
}
@inproceedings{jump-table-analysis,
  title={Recovery of jump table case statements from binary code},
  author={Cifuentes, Cristina and Van Emmerik, Mike},
  booktitle={IEEE International Workshop on Program Comprehension},
  year={1999},
}

@inproceedings{tfuzz,
  title={T-Fuzz: fuzzing by program transformation},
  author={Peng, Hui and Shoshitaishvili, Yan and Payer, Mathias},
  booktitle={2018 IEEE Symposium on Security and Privacy (SP)},
  pages={697--710},
  year={2018},
  organization={IEEE}
}
@article{digfuzz,
  title={Send Hardest Problems My Way: Probabilistic Path Prioritization for Hybrid Fuzzing},
  author={Zhao, Lei and Duan, Yue and Yin, Heng and Xuan, Jifeng}
}
@inproceedings{profuzzer,
  title={ProFuzzer: On-the-fly Input Type Probing for Better Zero-Day Vulnerability Discovery},
  author={You, Wei and Wang, Xueqiang and Ma, Shiqing and Huang, Jianjun and Zhang, Xiangyu and Wang, XiaoFeng and Liang, Bin},
  booktitle={ProFuzzer: On-the-fly Input Type Probing for Better Zero-Day Vulnerability Discovery},
  pages={0},
  organization={IEEE}
}
@inproceedings{neuzz,
  title={NEUZZ: Efficient Fuzzing with Neural Program Smoothing},
  author={She, Dongdong and Pei, Kexin and Epstein, Dave and Yang, Junfeng and Ray, Baishakhi and Jana, Suman},
  booktitle={NEUZZ: Efficient Fuzzing with Neural Program Smoothing},
  pages={0},
  year={2018},
  organization={IEEE}
}

@inproceedings{aflgo,
  title={Directed greybox fuzzing},
  author={B{\"o}hme, Marcel and Pham, Van-Thuan and Nguyen, Manh-Dung and Roychoudhury, Abhik},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2329--2344},
  year={2017},
  organization={ACM}
}

@inproceedings{christakis,
  title={Guiding dynamic symbolic execution toward unverified program executions},
  author={Christakis, Maria and M{\"u}ller, Peter and W{\"u}stholz, Valentin},
  booktitle={Proceedings of the 38th International Conference on Software Engineering},
  pages={144--155},
  year={2016},
  organization={ACM}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% seed generation


@inproceedings{skyfire,
  title={Skyfire: Data-driven seed generation for fuzzing},
  author={Wang, Junjie and Chen, Bihuan and Wei, Lei and Liu, Yang},
  booktitle = {Proceedings of the 2017 IEEE Symposium on Security and Privacy (SP)},
  year={2017},
  pages={579--594},
  publisher = {IEEE},
}

@inproceedings{godefroid2008grammar,
 author = {Godefroid, Patrice and Kiezun, Adam and Levin, Michael Y.},
 title = {Grammar-based Whitebox Fuzzing},
 booktitle = {Proceedings of the 29th ACM SIGPLAN Conference on Programming Language Design and Implementation},
 year = {2008},
 pages = {206--215},
 publisher = {ACM},
}


@phdthesis{szekeres2017memory,
  title={Memory corruption mitigation via hardening and testing},
  author={Szekeres, L{\'a}szl{\'o}},
  year={2017},
  school={Stony Brook University}
}


@inproceedings{pham2016model,
 author = {Pham, Van-Thuan and B\"{o}hme, Marcel and Roychoudhury, Abhik},
 title = {Model-based Whitebox Fuzzing for Program Binaries},
 booktitle = {Proceedings of the 31st IEEE/ACM International Conference on Automated Software Engineering},
 year = {2016},
 pages = {543--553},
 publisher = {ACM},
} 


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% fuzzing scheduling
@inproceedings{aflfast,
  title={Coverage-based greybox fuzzing as markov chain},
  author={B{\"o}hme, Marcel and Pham, Van-Thuan and Roychoudhury, Abhik},
  booktitle={Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages={1032--1043},
  year={2016},
  publisher={ACM},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% taint based fuzzing

@inproceedings{vuzzer,
  title={Vuzzer: Application-aware evolutionary fuzzing},
  author={Rawat, Sanjay and Jain, Vivek and Kumar, Ashish and Cojocar, Lucian and Giuffrida, Cristiano and Bos, Herbert},
  booktitle={Proceedings of the Network and Distributed System Security Symposium (NDSS)},
  year={2017}
}

@inproceedings{bekrar2012taint,
  title={A taint based approach for smart fuzzing},
  author={Bekrar, Sofia and Bekrar, Chaouki and Groz, Roland and Mounier, Laurent},
  booktitle={Software Testing, Verification and Validation (ICST), 2012 IEEE Fifth International Conference on},
  pages={818--825},
  year={2012},
  publisher={IEEE}
}

@inproceedings{taintscope,
  title={TaintScope: A checksum-aware directed fuzzing tool for automatic software vulnerability detection},
  author={Wang, Tielei and Wei, Tao and Gu, Guofei and Zou, Wei},
  booktitle={Security and privacy (SP), 2010 IEEE symposium on},
  pages={497--512},
  year={2010},
  publisher={IEEE}
}

@techreport{leek2007coverage,
  title={Coverage maximization using dynamic taint tracing},
  author={Leek, Timothy Robert and Baker, Graham Z and Brown, Ruben Edward and Zhivich, Michael A and Lippmann, RP},
  year={2007},
  institution={MASSACHUSETTS INST OF TECH LEXINGTON LINCOLN LAB}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% improve greybox fuzzing with extra components
@inproceedings{slowfuzz,
  title={Slowfuzz: Automated domain-independent detection of algorithmic complexity vulnerabilities},
  author={Petsios, Theofilos and Zhao, Jason and Keromytis, Angelos D and Jana, Suman},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2155--2168},
  year={2017},
  publisher={ACM}
}

@inproceedings{designing,
  title={Designing New Operating Primitives to Improve Fuzzing Performance},
  author={Xu, Wen and Kashyap, Sanidhya and Min, Changwoo and Kim, Taesoo},
  booktitle={Proceedings of the 2017 ACM SIGSAC Conference on Computer and Communications Security},
  pages={2313--2328},
  year={2017},
  publisher={ACM}
}

@misc{ossfuzz,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://github.com/google/oss-fuzz}},
	Title = {OSS-Fuzz - Continuous Fuzzing for Open Source Software},
	year = {2005},
	Bdsk-Url-1 = {https://github.com/google/oss-fuzz}
}

@inproceedings{asan,
 author = {Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitry},
 title = {AddressSanitizer: A Fast Address Sanity Checker},
 booktitle = {Proceedings of the 2012 USENIX Conference on Annual Technical Conference},
 year = {2012},
 pages = {28--28},
 publisher = {USENIX Association},
} 

@inproceedings{msan,
  title={MemorySanitizer: fast detector of uninitialized memory use in C++},
  author={Stepanov, Evgeniy and Serebryany, Konstantin},
  booktitle={Proceedings of the 13th Annual IEEE/ACM International Symposium on Code Generation and Optimization},
  pages={46--55},
  year={2015},
  publisher={IEEE}
}

@inproceedings{dangsan,
  title={DangSan: Scalable Use-after-free Detection},
  author={van der Kouwe, Erik and Nigade, Vinod and Giuffrida, Cristiano},
  booktitle={Proceedings of the Twelfth European Conference on Computer Systems},
  pages={405--419},
  year={2017},
  publisher={ACM}
}

@inproceedings{typesan,
  title={TypeSan: Practical type confusion detection},
  author={Haller, Istvan and Jeon, Yuseok and Peng, Hui and Payer, Mathias and Giuffrida, Cristiano and Bos, Herbert and van der Kouwe, Erik},
  booktitle={Proceedings of the 2016 ACM SIGSAC Conference on Computer and Communications Security},
  pages={517--528},
  year={2016},
  publisher={ACM}
}

@inproceedings{klee,
 author = {Cadar, Cristian and Dunbar, Daniel and Engler, Dawson},
 title = {KLEE: Unassisted and Automatic Generation of High-coverage Tests for Complex Systems Programs},
 booktitle = {Proceedings of the 8th USENIX Conference on Operating Systems Design and Implementation},
 year = {2008},
 pages = {209--224},
 publisher = {USENIX Association},
}

@inproceedings{s2e,
 author = {Chipounov, Vitaly and Kuznetsov, Volodymyr and Candea, George},
 title = {{S2E}: A Platform for In-vivo Multi-path Analysis of Software Systems},
 booktitle = {Proceedings of the Sixteenth International Conference on Architectural Support for Programming Languages and Operating Systems},
 year = {2011},
 pages = {265--278},
 publisher = {ACM},
}

@misc{libfuzz,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://llvm.org/docs/LibFuzzer.html}},
	Title = {libFuzzer – a library for coverage-guided fuzz testing.},
	Bdsk-Url-1 = {https://llvm.org/docs/LibFuzzer.html}
}

@misc{manticore,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://github.com/trailofbits/manticore}},
	Title = {Manticore.},
	year = {2015},
	Bdsk-Url-1 = {https://github.com/trailofbits/manticore}
}


@inproceedings{nezha,
  title={NEZHA: Efficient Domain-Independent Differential Testing},
  author={Petsios, Theofilos and Tang, Adrian and Stolfo, Salvatore and Keromytis, Angelos D and Jana, Suman},
  booktitle={Proceedings of the 2017 IEEE Symposium on Security and Privacy (SP)},
  pages={615--632},
  year={2017},
  publisher={IEEE}
}

@inproceedings{driller,
  title={Driller: Augmenting Fuzzing Through Selective Symbolic Execution.},
  author={Stephens, Nick and Grosen, John and Salls, Christopher and Dutcher, Andrew and Wang, Ruoyu and Corbetta, Jacopo and Shoshitaishvili, Yan and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={Proceedings of the Network and Distributed System Security Symposium (NDSS)},
  year={2016}
}


@inproceedings{sage,
  title={Automated whitebox fuzz testing.},
  author={Godefroid, Patrice and Levin, Michael Y and Molnar, David A and others},
  booktitle={NDSS},
  volume={8},
  pages={151--166},
  year={2008}
}
@inproceedings{jfuzz,
	author    = {Karthick Jayaraman and	
				David Harvison and 
				Vijay Ganesh and 
				Adam Kiezun},
	title     = {jFuzz: {A} Concolic Whitebox Fuzzer for Java},
	booktitle = {First {NASA} Formal Methods Symposium - {NFM} 2009, Moffett Field,
		California, USA, April 6-8, 2009.},
	pages     = {121--125},
	year      = {2009},
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% binary-friendly and hardware assisted greybox fuzzing 

@misc{afltech,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://lcamtuf.coredump.cx/afl/technical_details.txt}},
	Title = {AFL technical details},
	Bdsk-Url-1 = {http://lcamtuf.coredump.cx/afl/technical_details.txt}}

@misc{afl-dyninst,
Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://github.com/vrtadmin/mo ow/tree/master/afl-dyninst}},
	Title = {AFL-dyninst},
	Bdsk-Url-1 = {https://github.com/vrtadmin/mo ow/tree/master/afl-dyninst}}

@misc{triforce,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2016/june/project-triforce-run-afl-on-everything/}},
	Title = {Project Triforce: Run AFL on Everything!},
	year={2016},
	Bdsk-Url-1 = {https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2016/june/project-triforce-run-afl-on-everything/}}
	
	
@misc{honggfuzz,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://honggfuzz.com}},
	Title = {Honggfuzz},
	Bdsk-Url-1 = {http://honggfuzz.com}}	

@misc{winafl,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://recon.cx/2017/brussels/talks/intel_processor_trace.html}},
	Title = {Harnessing Intel Processor Trace on Windows for fuzzing and dynamic analysis},
	year={2017},
	Bdsk-Url-1 = {https://recon.cx/2017/brussels/talks/intel_processor_trace.html}}	



@inproceedings {kafl,
author = {Sergej Schumilo and Cornelius Aschermann and Robert Gawlik and Sebastian Schinzel and Thorsten Holz},
title = {kAFL: Hardware-Assisted Feedback Fuzzing for {OS} Kernels},
booktitle = {Proceedings of the 26rd USENIX Conference on Security Symposium},
year = {2017},
pages = {167--182},
publisher = {{USENIX} Association},
}

@inproceedings{seedoptimize,
  title={Optimizing Seed Selection for Fuzzing.},
  author={Rebert, Alexandre and Cha, Sang Kil and Avgerinos, Thanassis and Foote, Jonathan and Warren, David and Grieco, Gustavo and Brumley, David},
  booktitle={USENIX Security Symposium},
  pages={861--875},
  year={2014}
}
@article{evaluatefuzz,
  title={Evaluating Fuzz Testing},
  author={Klees, George and Ruef, Andrew and Cooper, Benji and Wei, Shiyi and Hicks, Michael},
  journal={arXiv preprint arXiv:1808.09700},
  year={2018}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% misc
@misc{drillerimpl,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://github.com/shellphish/driller}},
	Title = {Driller: augmenting AFL with symbolic execution!},
	Bdsk-Url-1 = {https://github.com/shellphish/driller}}
@misc{qsymimpl,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://github.com/sslab-gatech/qsym}},
	Title = {QSYM: A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing},
	Bdsk-Url-1 = {https://github.com/sslab-gatech/qsym}}

@misc{cgc,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://archive.darpa.mil/cybergrandchallenge/}},
	Title = {DARPA Cyber Grand Challenge},
	Bdsk-Url-1 = {http://archive.darpa.mil/cybergrandchallenge/}}

@misc{hashfunc,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://www.isthe.com/chongo/tech/comp/fnv/}},
	Title = {FNV Hash},
	Bdsk-Url-1 = {http://www.isthe.com/chongo/tech/comp/fnv/}}
@misc{hrtimer,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://www.kernel.org/doc/Documentation/timers/hrtimers.txt}},
	Title = {hrtimers - subsystem for high-resolution kernel timers},
	Bdsk-Url-1 = {https://www.kernel.org/doc/Documentation/timers/hrtimers.txt}}
@misc{tracepoint,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://www.kernel.org/doc/Documentation/trace/tracepoints.txt}},
	Title = {Using the Linux Kernel Tracepoints},
	Bdsk-Url-1 = {https://www.kernel.org/doc/Documentation/trace/tracepoints.txt}}

@inproceedings{griffin,
  title={Griffin: Guarding control flows using intel processor trace},
  author={Ge, Xinyang and Cui, Weidong and Jaeger, Trent},
  booktitle={Proceedings of the Twenty-Second International Conference on Architectural Support for Programming Languages and Operating Systems},
  pages={585--598},
  year={2017},
  publisher={ACM}
}

@inproceedings{angr,
  title={{SoK: (State of) The Art of War: Offensive Techniques in Binary Analysis}},
  author={Shoshitaishvili, Yan and Wang, Ruoyu and Salls, Christopher and
          Stephens, Nick and Polino, Mario and Dutcher, Audrey and Grosen, John and
          Feng, Siji and Hauser, Christophe and Kruegel, Christopher and Vigna, Giovanni},
  booktitle = {Proceedings of the 2016 IEEE Symposium on Security and Privacy (SP)},
  pages={138--157},
  year={2016},
  publisher={IEEE}
}

@misc{execreconstruct,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing}},
	Title = {Execution flow reconstruction from Intel processor trace packet},
	Bdsk-Url-1 = {https://software.intel.com/en-us/blogs/2013/09/18/processor-tracing}}


@misc{forksrv,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html}},
	Title = {Fuzzing random programs without execve()},
	Bdsk-Url-1 = {https://lcamtuf.blogspot.com/2014/10/fuzzing-binaries-without-execve.html}}


@misc{PushtheR44:online,
author = {Dolan-Gavitt, Brendan},
title = {Push the Red Button: The LAVA Synthetic Bug Corpora},
howpublished = {\url{http://moyix.blogspot.com/2016/10/the-lava-synthetic-bug-corpora.html}},
month = {},
year = {},
note = {(Accessed on 02/05/2019)}
}

@inproceedings{lava,
  title={Lava: Large-scale automated vulnerability addition},
  author={Dolan-Gavitt, Brendan and Hulin, Patrick and Kirda, Engin and Leek, Tim and Mambretti, Andrea and Robertson, Wil and Ulrich, Frederick and Whelan, Ryan},
  booktitle = {Proceedings of the 2016 IEEE Symposium on Security and Privacy (SP)},
  pages={110--121},
  year={2016},
  publisher={IEEE}
}


@misc{sdbm,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://apr.apache.org/docs/apr-util/0.9/group__APR__Util__DBM__SDBM.html}},
	year = {2007},
	Title = {SDBM Database},
	Bdsk-Url-1 = {https://apr.apache.org/docs/apr-util/0.9/group__APR__Util__DBM__SDBM.html}}
@inproceedings{rebert2014optimizing,
 author = {Rebert, Alexandre and Cha, Sang Kil and Avgerinos, Thanassis and Foote, Jonathan and Warren, David and Grieco, Gustavo and Brumley, David},
 title = {Optimizing Seed Selection for Fuzzing},
 booktitle = {Proceedings of the 23rd USENIX Conference on Security Symposium},
 year = {2014},
 pages = {861--875},
 publisher = {USENIX Association},
} 


@misc{fuzzproj,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://fuzzing-project.org/software.html}},
	Title = {The fThe fuzzing project - appsuzzing project},
	Bdsk-Url-1 = {https://fuzzing-project.org/software.html}}


@inproceedings{li2017steelix,
  title={Steelix: program-state based binary fuzzing},
  author={Li, Yuekang and Chen, Bihuan and Chandramohan, Mahinthan and Lin, Shang-Wei and Liu, Yang and Tiu, Alwen},
  booktitle={Proceedings of the 2017 11th Joint Meeting on Foundations of Software Engineering},
  pages={627--637},
  year={2017},
  organization={ACM}
}
	
@misc{intel-pt,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3c-part-3-manual.pdf}},
	year = {2015},
	Title = {Intel Processor Trace},
	Bdsk-Url-1 = {https://www.intel.com/content/dam/www/public/us/en/documents/manuals/64-ia-32-architectures-software-developer-vol-3c-part-3-manual.pdf}}

@misc{afl,
author = {lcamtuf},
title = {american fuzzy lop},
year = {2005},
howpublished = {\url{http://lcamtuf.coredump.cx/afl/}},
}

@misc{tool-afl,
year = {2019},
howpublished = {\url{http://lcamtuf.coredump.cx/afl/releases/afl-latest.tgz}},
}

@misc{tool-aflgo,
year = {2018},
howpublished = {\url{https://github.com/aflgo/aflgo}},
}

@misc{tool-tfuzz,
year = {2018},
howpublished = {\url{https://github.com/HexHive/T-Fuzz}},
}

@misc{tool-angora,
year = {2019},
howpublished = {\url{https://github.com/AngoraFuzzer/Angora}},
}

@misc{tool-angora1,
year = {2019},
howpublished = {\url{https://github.com/AngoraFuzzer/Angora/blob/master/docs/lava.md}},
}

@misc{tool-driller1,
year = {2018},
howpublished = {\url{https://github.com/shellphish/driller#the-stuck-heuristic}},
}


@misc{driller-patch,
year = {2018},
howpublished = {\url{https://github.com/shellphish/driller/issues/48}},
}

@misc{tool-qsym,
year = {2018},
howpublished = {\url{https://github.com/sslab-gatech/qsym}},
}


@inproceedings{bellard2005qemu,
 author = {Bellard, Fabrice},
 title = {QEMU, a Fast and Portable Dynamic Translator},
 booktitle = {Proceedings of the Annual Conference on USENIX Annual Technical Conference},
 year = {2005},
 pages = {41--46},
 publisher = {USENIX Association},
}

@article{bellard2007qemu,
  title={QEMU open source processor emulator},
  author={Bellard, Fabrice and others},
  journal={URL: http://www. qemu. org},
  pages={5},
  year={2007}
}

@misc{TheFuzzi90:online,
author = {Hanno Böck},
title = {The Fuzzing Project - apps},
howpublished = {\url{https://fuzzing-project.org/software.html}},
}


@article{fairfuzz,
  author    = {Caroline Lemieux and
               Koushik Sen},
  title     = {FairFuzz: Targeting Rare Branches to Rapidly Increase Greybox Fuzz
               Testing Coverage},
  journal   = {CoRR},
  volume    = {abs/1709.07101},
  year      = {2017},
  archivePrefix = {arXiv},
  timestamp = {Thu, 05 Oct 2017 09:43:03 +0200},
}


@misc{ianareex74:online,
author = {},
title = {Sample images for testing Exif metadata retrieval.},
howpublished = {\url{https://github.com/ianare/exif-samples}},
}

@misc{FuzzingP53:online,
author = {Geeknik Labs},
title = {Fuzzing Perl: A Tale of Two American Fuzzy Lops },
howpublished = {\url{http://www.geeknik.net/71nvhf1fp}},
}

@inproceedings{seltzer1991new,
  title={A New Hashing Package for UNIX.},
  author={Seltzer, Margo I and Yigit, Ozan},
  booktitle={USENIX Winter},
  pages={173--184},
  year={1991}
}

@article{henke2008empirical,
 author = {Henke, Christian and Schmoll, Carsten and Zseby, Tanja},
 title = {Empirical Evaluation of Hash Functions for Multipoint Measurements},
 journal = {SIGCOMM Comput. Commun. Rev.},
 issue_date = {July 2008},
 volume = {38},
 number = {3},
 month = jul,
 year = {2008},
 issn = {0146-4833},
 pages = {39--50},
 numpages = {12},
 publisher = {ACM},
 address = {New York, NY, USA},
 keywords = {hash function, multipoint measurements, network measurement, packet selection, sampling},
}

@misc{anonymous,
 title = {The source code of ptrix},
 howpublished = {\url{anonymous-link}},
}


@INPROCEEDINGS{collafl,
author = {S. Gan and C. Zhang and X. Qin and X. Tu and K. Li and Z. Pei and Z. Chen},
booktitle = {2018 IEEE Symposium on Security and Privacy (SP)},
title = {CollAFL: Path Sensitive Fuzzing},
year = {},
volume = {00},
number = {},
pages = {660-677},
keywords={fuzzing;vulnerability-discovery},
doi = {10.1109/SP.2018.00040},
ISSN = {2375-1207},
month={}
}

@article{angora,
  title={Angora: Efficient Fuzzing by Principled Search},
  author={Chen, Peng and Chen, Hao},
  journal={arXiv preprint arXiv:1803.01307},
  year={2018}
}

@inproceedings{mu2018understanding,
  title={Understanding the Reproducibility of Crowd-reported Security Vulnerabilities},
  author={Mu, Dongliang and Cuevas, Alejandro and Yang, Limin and Hu, Hang and Xing, Xinyu and Mao, Bing and Wang, Gang},
  booktitle={27th USENIX Security Symposium (USENIX Security 18)},
  year={2018},
  organization={USENIX Association}
}

@article{zalewski2014american,
  title={American Fuzzy Lop.(2014)},
  author={Zalewski, Michal},
  journal={URL http://lcamtuf.coredump.cx/afl},
  year={2014}
}

@book{smullyan1992godel,
  title={G{\"o}del's incompleteness theorems},
  author={Smullyan, Raymond M and Smullyan, Raymond},
  year={1992},
  publisher={Oxford University Press on Demand}
}

@misc{TheMytho90:online,
author = {},
title = {The Myth of “Bug Free” Software | Beta Breakers},
howpublished = {\url{https://www.betabreakers.com/the-myth-of-bug-free-software/}},
month = {},
year = {},
note = {(Accessed on 08/22/2018)}
}

@book{takanen2008fuzzing,
  title={Fuzzing for software security testing and quality assurance},
  author={Takanen, Ari and Demott, Jared D and Miller, Charles},
  year={2008},
  publisher={Artech House}
}

@inproceedings{sen2007concolic,
  title={Concolic testing},
  author={Sen, Koushik},
  booktitle={Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering},
  pages={571--572},
  year={2007},
  organization={ACM}
}

@inproceedings{majumdar2007hybrid,
  title={Hybrid concolic testing},
  author={Majumdar, Rupak and Sen, Koushik},
  booktitle={Software Engineering, 2007. ICSE 2007. 29th International Conference on},
  pages={416--426},
  year={2007},
  organization={IEEE}
}

@misc{apollo,
	author = {{Baidu Inc.}},
	title = {{An Open Autonomous Driving Platform}},
	howpublished = {\url{https://github.com/ApolloAuto/apollo}},
}



@article{fan2018baidu,
  title={Baidu Apollo EM Motion Planner},
  author={Fan, Haoyang and Zhu, Fan and Liu, Changchun and Zhang, Liangliang and Zhuang, Li and Li, Dong and Zhu, Weicheng and Hu, Jiangtao and Li, Hongye and Kong, Qi},
  journal={arXiv preprint arXiv:1807.08048},
  year={2018}
}

@article{cooper2001simple,
  title={A simple, fast dominance algorithm},
  author={Cooper, Keith D and Harvey, Timothy J and Kennedy, Ken},
  journal={Software Practice \& Experience},
  volume={4},
  number={1-10},
  pages={1--8},
  year={2001}
}

@inproceedings {qsyminsu,
author = {Insu Yun and Sangho Lee and Meng Xu and Yeongjin Jang and Taesoo Kim},
title = {{QSYM} : A Practical Concolic Execution Engine Tailored for Hybrid Fuzzing},
booktitle = {27th {USENIX} Security Symposium ({USENIX} Security 18)},
year = {2018},
pages = {745--761},
url = {https://www.usenix.org/conference/usenixsecurity18/presentation/yun},
publisher = {{USENIX} Association},
}

@article{pak2012hybrid,
  title={Hybrid fuzz testing: Discovering software bugs via fuzzing and symbolic execution},
  author={Pak, Brian S},
  journal={School of Computer Science Carnegie Mellon University},
  year={2012}
}

@inproceedings{haller2013dowsing,
  title={Dowsing for overflows: a guided fuzzer to find buffer boundary violations.},
  author={Haller, Istvan and Slowinska, Asia and Neugschwandtner, Matthias and Bos, Herbert},
  booktitle={USENIX Security Symposium},
  pages={49--64},
  year={2013}
}

@inproceedings{sui2016svf,
  title={SVF: interprocedural static value-flow analysis in LLVM},
  author={Sui, Yulei and Xue, Jingling},
  booktitle={Proceedings of the 25th International Conference on Compiler Construction},
  pages={265--266},
  year={2016},
  organization={ACM}
}

@inproceedings{hardekopf2011flow,
  title={Flow-sensitive pointer analysis for millions of lines of code},
  author={Hardekopf, Ben and Lin, Calvin},
  booktitle={Proceedings of the 9th Annual IEEE/ACM International Symposium on Code Generation and Optimization},
  pages={289--298},
  year={2011},
  organization={IEEE Computer Society}
}

@misc{sourcewa0:online,
author = {},
title = {sourceware.org Git - binutils-gdb.git/commitdiff},
howpublished = {\url{https://sourceware.org/git/gitweb.cgi?p=binutils-gdb.git;a=commitdiff;h=f2023ce7e8d70b0155cc6206c901e185260918f0}},
month = {},
year = {},
note = {(Accessed on 09/14/2018)}
}



@misc{z3,
author = {},
title = {The Z3 Theorem Prover},
howpublished = {\url{https://github.com/Z3Prover/z3}},
month = {},
year = {},
note = {(Accessed on 08/22/2018)}
}
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% white-box fuzzing





%ubsan
@misc{ubsanlist,
author = {},
title = {Clang 8 documentation - UNDEFINED BEHAVIOR SANITIZER},
howpublished = {\url{http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html#ubsan-checks}},
month = {},
year = {},
note = {(Accessed on 08/22/2018)}
}

@misc{appleubsan,
author = {},
title = {Undefined Behavior Sanitizer - Discover and fix undefined behavior in your code.},
howpublished = {\url{https://developer.apple.com/documentation/code_diagnostics/undefined_behavior_sanitizer}},
month = {},
year = {},
note = {(Accessed on 08/22/2018)}
}

@misc{chromeubsan,
author = {},
title = {UndefinedBehaviorSanitizer (UBSan).},
howpublished = {\url{https://www.chromium.org/developers/testing/undefinedbehaviorsanitizer}},
month = {},
year = {},
note = {(Accessed on 08/22/2018)}
}

@misc{kernelubsan,
author = {},
title = {The Undefined Behavior Sanitizer - UBSAN.},
howpublished = {\url{https://www.kernel.org/doc/html/v4.14/dev-tools/ubsan.html}},
month = {},
year = {},
note = {(Accessed on 08/22/2018)}
}

@inproceedings{ubsanimpact,
	title={Towards optimization-safe systems: Analyzing the impact of undefined behavior},
	author={Wang, Xi and Zeldovich, Nickolai and Kaashoek, M Frans and Solar-Lezama, Armando},
	booktitle={Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles},
	pages={260--275},
	year={2013},
	organization={ACM}
}

@inproceedings{Dietz:2012,
 author = {Dietz, Will and Li, Peng and Regehr, John and Adve, Vikram},
 title = {Understanding Integer Overflow in C/C++},
 booktitle = {Proceedings of the 34th International Conference on Software Engineering},
 series = {ICSE'12},
 year = {2012},
 location = {Zurich, Switzerland},
 pages = {760--770},
} 


@misc{Undefine34:online,
	author = {},
	title = {UndefinedBehaviorSanitizer — Clang 8 documentation},
	howpublished = {\url{http://clang.llvm.org/docs/UndefinedBehaviorSanitizer.html}},
	month = {},
	year = {},
	note = {(Accessed on 09/27/2018)}
}

@inproceedings{serebryany2012addresssanitizer,
  title={AddressSanitizer: A Fast Address Sanity Checker.},
  author={Serebryany, Konstantin and Bruening, Derek and Potapenko, Alexander and Vyukov, Dmitriy},
  booktitle={USENIX Annual Technical Conference},
  pages={309--318},
  year={2012}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% General Symbolic/Concolic Execution 
@article{King76,
	author    = {James C. King},
	title     = {Symbolic Execution and Program Testing},
	journal   = {Commun. {ACM}},
	volume    = {19},
	number    = {7},
	pages     = {385--394},
	year      = {1976},
}

@article{Howden77,
	author    = {William E. Howden},
	title     = {Symbolic Testing and the {DISSECT} Symbolic Evaluation System},
	journal   = {{IEEE} Trans. Software Eng.},
	volume    = {3},
	number    = {4},
	pages     = {266--278},
	year      = {1977},
}

@article{CadarS13,
	author    = {Cristian Cadar and
				Koushik Sen},
	title     = {Symbolic execution for software testing: three decades later},
	journal   = {Commun. {ACM}},
	volume    = {56},
	number    = {2},
	pages     = {82--90},
	year      = {2013},
}

@inproceedings{GaneshD07,
	author    = {Vijay Ganesh and David L. Dill},
	title     = {A Decision Procedure for Bit-Vectors and Arrays},
	booktitle = CAV,
	series    = {Lecture Notes in Computer Science},
	volume    = {4590},
	pages     = {519--531},
	year      = {2007},
}

@inproceedings{MouraDS07,
	author    = {Leonardo Mendon{\c{c}}a de Moura and
	             Bruno Dutertre and
	             Natarajan Shankar},
	title     = {A Tutorial on Satisfiability Modulo Theories},
	booktitle = CAV,
	series    = {Lecture Notes in Computer Science},
	volume    = {4590},
	pages     = {20--36},
	year      = {2007},
}

@article{MouraB11,
	author    = {Leonardo Mendon{\c{c}}a de Moura and Nikolaj Bj{\o}rner},
	title     = {Satisfiability modulo theories: introduction and applications},
	journal   = {Commun. {ACM}},
	volume    = {54},
	number    = {9},
	pages     = {69--77},
	year      = {2011},
}

@inproceedings{GodefroidKS05,
	author    = {Patrice Godefroid and Nils Klarlund and Koushik Sen},
	title     = {{DART:} directed automated random testing},
	booktitle = {Proceedings of the {ACM} {SIGPLAN} 2005 Conference on Programming
		Language Design and Implementation, Chicago, IL, USA, June 12-15,
		2005},
	pages     = {213--223},
	year      = {2005},
}

@inproceedings{Sen07a,
  title={Concolic testing},
  author={Sen, Koushik},
  booktitle={Proceedings of the twenty-second IEEE/ACM international conference on Automated software engineering},
  pages={571--572},
  year={2007},
  organization={ACM}
}



@inproceedings{SenMA05,
	author    = {Koushik Sen and Darko Marinov and Gul Agha},
	title     = {{CUTE:} a concolic unit testing engine for {C}},
	booktitle = {Proceedings of the 10th European Software Engineering Conference held
		jointly with 13th {ACM} {SIGSOFT} International Symposium on Foundations
			of Software Engineering, 2005, Lisbon, Portugal, September 5-9, 2005},
	pages     = {263--272},
	year      = {2005}
}

@inproceedings{BurnimS08,
	author    = {Jacob Burnim and
		Koushik Sen},
	title     = {Heuristics for Scalable Dynamic Test Generation},
	booktitle = {23rd {IEEE/ACM} International Conference on Automated Software Engineering, 
				15-19 September 2008, L'Aquila, Italy},
	pages     = {443--446},
	year      = {2008},
}

@inproceedings{SenA06,
	author    = {Koushik Sen and Gul Agha},
	title     = {{CUTE} and jCUTE: Concolic Unit Testing and Explicit Path Model-Checking Tools},
	booktitle = {Computer Aided Verification, 18th International Conference, Seattle, WA, USA, 
		August 17-20, 2006, Proceedings},
	pages     = {419--423},
	year      = {2006}
}

@article{SPF,
	author    = {Kasper S{\o}e Luckow and
		Corina S. Pasareanu},
	title     = {Symbolic PathFinder v7},
	journal   = {{ACM} {SIGSOFT} Software Engineering Notes},
	volume    = {39},
	number    = {1},
	pages     = {1--5},
	year      = {2014},
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Concolic Execution for vulnerability detection
@inproceedings{ChoBPCWS11,
	author    = {Chia Yuan Cho and 
				Domagoj Babic and
				Pongsin Poosankam and
				Kevin Zhijie Chen and
				Edward XueJun Wu and
				Dawn Song},
	title     = {{MACE:} Model-inference-Assisted Concolic Exploration for Protocol
		and Vulnerability Discovery},
	booktitle = {20th {USENIX} Security Symposium, San Francisco, CA, USA, August 8-12,
		2011, Proceedings},
	year      = {2011},
}

@inproceedings{ChaARB12,
	author    = {Sang Kil Cha and 
				Thanassis Avgerinos and
				Alexandre Rebert and
				David Brumley},
	title     = {Unleashing Mayhem on Binary Code},
	booktitle = {{IEEE} Symposium on Security and Privacy, {SP} 2012, 21-23 May 2012,
		San Francisco, California, {USA}},
	pages     = {380--394},
	year      = {2012},
}

@inproceedings{AEG,
	author    = {Thanassis Avgerinos and
				Sang Kil Cha and
				Brent Lim Tze Hao and
				David Brumley},
	title     = {{AEG:} Automatic Exploit Generation},
	booktitle = {Proceedings of the Network and Distributed System Security Symposium,
		{NDSS} 2011, San Diego, California, USA, 6th February - 9th February
		2011},
	year      = {2011},
}

%%%%%%%%%%%%%%%%%%%%%%%%% paralle symbolic execution
@inproceedings{BucurUZC11,
	author    = {Stefan Bucur and
				Vlad Ureche and
				Cristian Zamfir and
				George Candea},
	title     = {Parallel symbolic execution for automated real-world software testing},
	booktitle = {European Conference on Computer Systems, Proceedings of the Sixth
		European conference on Computer systems, EuroSys 2011, Salzburg, Austria,
		April 10-13, 2011},
	pages     = {183--198},
	year      = {2011},
}

%%%%%%%%%%%%%%%%%%%%%%%% catdoc for the case study

@misc{catdoc,
	Date-Added = {2015-11-14 00:48:40 +0000},
	Date-Modified = {2015-11-14 00:49:16 +0000},
	Howpublished = {\url{http://www.wagner.pp.ru/~vitus/software/catdoc/}},
	Title = {Command-line utility for converting Microsoft Word documents to text.},
	Bdsk-Url-1 = {https://github.com/petewarden/catdoc}
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% Weakeast precondition-based method
@inproceedings{GuoKWYG15,
	author    = {Shengjian Guo and
				Markus Kusano and
				Chao Wang and
				Zijiang Yang and
				Aarti Gupta},
	title     = {Assertion guided symbolic execution of multithreaded programs},
	booktitle = {Proceedings of the 2015 10th Joint Meeting on Foundations of Software
		Engineering, {ESEC/FSE} 2015, Bergamo, Italy, August 30 - September
			4, 2015},
	pages     = {854--865},
	year      = {2015},
}

@article{YiYGWLZ18,
	author    = {Qiuping Yi and
				Zijiang Yang and
				Shengjian Guo and
				Chao Wang and
				Jian Liu and
				Chen Zhao},
	title     = {Eliminating Path Redundancy via Postconditioned Symbolic Execution},
	journal   = {{IEEE} Trans. Software Eng.},
	volume    = {44},
	number    = {1},
	pages     = {25--43},
	year      = {2018},
}

@inproceedings{machiry2017dr,
  title={DR. CHECKER: A Soundy Analysis for Linux Kernel Drivers},
  author={Machiry, Aravind and Spensky, Chad and Corina, Jake and Stephens, Nick and Kruegel, Christopher and Vigna, Giovanni},
  booktitle={26th $\{$USENIX$\}$ Security Symposium ($\{$USENIX$\}$ Security 17)},
  pages={1007--1024},
  year={2017},
  organization={USENIX Association}
}

@inproceedings{brumley2007creating,
  title={Creating vulnerability signatures using weakest preconditions},
  author={Brumley, David and Wang, Hao and Jha, Somesh and Song, Dawn},
  booktitle={20th IEEE Computer Security Foundations Symposium (CSF'07)},
  pages={311--325},
  year={2007},
  organization={IEEE}
}

@article{chess2004static,
  title={Static analysis for security},
  author={Chess, Brian and McGraw, Gary},
  journal={IEEE Security \& Privacy},
  volume={2},
  number={6},
  pages={76--79},
  year={2004},
  publisher={IEEE}
}

@article{zheng2006value,
  title={On the value of static analysis for fault detection in software},
  author={Zheng, Jiang and Williams, Laurie and Nagappan, Nachiappan and Snipes, Will and Hudepohl, John P and Vouk, Mladen A},
  journal={IEEE transactions on software engineering},
  number={4},
  pages={240--253},
  year={2006},
  publisher={IEEE}
}

@inproceedings{wagner2000first,
  title={A First Step Towards Automated Detection of Buffer Overrun Vulnerabilities.},
  author={Wagner, David and Foster, Jeffrey S and Brewer, Eric A and Aiken, Alexander},
  booktitle={NDSS},
  pages={2000--02},
  year={2000}
}

@inproceedings{barnett2005weakest,
  title={Weakest-precondition of unstructured programs},
  author={Barnett, Mike and Leino, K Rustan M},
  booktitle={ACM SIGSOFT Software Engineering Notes},
  volume={31},
  number={1},
  pages={82--87},
  year={2005},
  organization={ACM}
}

@misc{afifi2000method,
  title={Method and apparatus for analyzing computer code using weakest precondition},
  author={Afifi, Ashraf and Chan, Dominic and Comuzzi, Joseph J and Hart, Johnson M and Pizzarello, Antonio},
  year={2000},
  month=feb # "~22",
  publisher={Google Patents},
  note={US Patent 6,029,002}
}

@incollection{harel2001dynamic,
  title={Dynamic logic},
  author={Harel, David and Kozen, Dexter and Tiuryn, Jerzy},
  booktitle={Handbook of philosophical logic},
  pages={99--217},
  year={2001},
  publisher={Springer}
}

@inproceedings{wang2013towards,
  title={Towards optimization-safe systems: Analyzing the impact of undefined behavior},
  author={Wang, Xi and Zeldovich, Nickolai and Kaashoek, M Frans and Solar-Lezama, Armando},
  booktitle={Proceedings of the Twenty-Fourth ACM Symposium on Operating Systems Principles},
  pages={260--275},
  year={2013},
  organization={ACM}
}

@article{godefroid2012sage,
  title={SAGE: whitebox fuzzing for security testing},
  author={Godefroid, Patrice and Levin, Michael Y and Molnar, David},
  journal={Queue},
  volume={10},
  number={1},
  pages={20},
  year={2012},
  publisher={ACM}
}

@inproceedings{dolan2016lava,
  title={Lava: Large-scale automated vulnerability addition},
  author={Dolan-Gavitt, Brendan and Hulin, Patrick and Kirda, Engin and Leek, Tim and Mambretti, Andrea and Robertson, Wil and Ulrich, Frederick and Whelan, Ryan},
  booktitle={Security and Privacy (SP), 2016 IEEE Symposium on},
  pages={110--121},
  year={2016},
  organization={IEEE}
}

@misc{PushtheR3:online,
author = {Dolan-Gavitt, Brendan},
title = {Push the Red Button},
howpublished = {\url{http://moyix.blogspot.com/}},
month = {},
year = {},
note = {(Accessed on 10/01/2018)}
}

@inproceedings{XieTHS09,
  author    = {Tao Xie and
               Nikolai Tillmann and
               Jonathan de Halleux and
               Wolfram Schulte},
  title     = {Fitness-guided path exploration in dynamic symbolic execution},
  booktitle = {Proceedings of the 2009 {IEEE/IFIP} International Conference on Dependable
               Systems and Networks, {DSN} 2009, Estoril, Lisbon, Portugal, June
               29 - July 2, 2009},
  pages     = {359--368},
  year      = {2009},
}


@inproceedings{MarinescuC13,
  author    = {Paul Dan Marinescu and
               Cristian Cadar},
  title     = {{KATCH:} high-coverage testing of software patches},
  booktitle = {Joint Meeting of the European Software Engineering Conference and
               the {ACM} {SIGSOFT} Symposium on the Foundations of Software Engineering,
               ESEC/FSE'13, Saint Petersburg, Russian Federation, August 18-26, 2013},
  pages     = {235--245},
  year      = {2013},
}

@inproceedings{LiSWL13,
  author    = {You Li and
               Zhendong Su and
               Linzhang Wang and
               Xuandong Li},
  title     = {Steering symbolic execution to less traveled paths},
  booktitle = {Proceedings of the 2013 {ACM} {SIGPLAN} International Conference on
               Object Oriented Programming Systems Languages {\&} Applications,
               {OOPSLA} 2013, part of {SPLASH} 2013, Indianapolis, IN, USA, October
               26-31, 2013},
  pages     = {19--32},
  year      = {2013},
}

@inproceedings{YangKPR14,
  author    = {Guowei Yang and
               Sarfraz Khurshid and
               Suzette Person and
               Neha Rungta},
  title     = {Property differencing for incremental checking},
  booktitle = {36th International Conference on Software Engineering, {ICSE} '14,
               Hyderabad, India - May 31 - June 07, 2014},
  pages     = {1059--1070},
  year      = {2014},
}

@inproceedings{MaKFH11,
  author    = {Kin{-}Keung Ma and
               Yit Phang Khoo and
               Jeffrey S. Foster and
               Michael Hicks},
  title     = {Directed Symbolic Execution},
  booktitle = {Static Analysis - 18th International Symposium, {SAS} 2011, Venice,
               Italy, September 14-16, 2011. Proceedings},
  pages     = {95--111},
  year      = {2011},
}

@article{WangLGSZY17,
  author    = {Haijun Wang and
               Ting Liu and
               Xiaohong Guan and
               Chao Shen and
               Qinghua Zheng and
               Zijiang Yang},
  title     = {Dependence Guided Symbolic Execution},
  journal   = {{IEEE} Trans. Software Eng.},
  volume    = {43},
  number    = {3},
  pages     = {252--271},
  year      = {2017},
}

@inproceedings{SeoK14,
  author    = {Hyunmin Seo and
               Sunghun Kim},
  title     = {How we get there: a context-guided search strategy in concolic testing},
  booktitle = {Proceedings of the 22nd {ACM} {SIGSOFT} International Symposium on
               Foundations of Software Engineering, (FSE-22), Hong Kong, China, November
               16 - 22, 2014},
  pages     = {413--424},
  year      = {2014},
}

@inproceedings{CuiHWY13,
  author    = {Heming Cui and
               Gang Hu and
               Jingyue Wu and
               Junfeng Yang},
  title     = {Verifying systems rules using rule-directed symbolic execution},
  booktitle = {Architectural Support for Programming Languages and Operating Systems,
               {ASPLOS} '13, Houston, TX, {USA} - March 16 - 20, 2013},
  pages     = {329--342},
  year      = {2013},
}

@inproceedings{ZhangCWD015,
  author    = {Yufeng Zhang and
               Zhenbang Chen and
               Ji Wang and
               Wei Dong and
               Zhiming Liu},
  title     = {Regular Property Guided Dynamic Symbolic Execution},
  booktitle = {37th {IEEE/ACM} International Conference on Software Engineering,
               {ICSE} 2015, Florence, Italy, May 16-24, 2015, Volume 1},
  pages     = {643--653},
  year      = {2015},
}

@inproceedings{PalikarevaKC16,
  author    = {Hristina Palikareva and
               Tomasz Kuchta and
               Cristian Cadar},
  title     = {Shadow of a doubt: testing for divergences between software versions},
  booktitle = {Proceedings of the 38th International Conference on Software Engineering,
               {ICSE} 2016, Austin, TX, USA, May 14-22, 2016},
  pages     = {1181--1192},
  year      = {2016},
}


@inproceedings{GuoWW18,
  author    = {Shengjian Guo and
               Meng Wu and
               Chao Wang},
  title     = {Adversarial symbolic execution for detecting concurrency-related cache
               timing leaks},
  booktitle = {Proceedings of the 2018 {ACM} Joint Meeting on European Software Engineering
               Conference and Symposium on the Foundations of Software Engineering,
               {ESEC/SIGSOFT} {FSE} 2018, Lake Buena Vista, FL, USA, November 04-09,
               2018},
  pages     = {377--388},
  year      = {2018},
}







